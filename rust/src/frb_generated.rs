// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -418359953;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__blockchain__bdk_blockchain_broadcast_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr: impl CstDecode<crate::api::blockchain::BdkBlockchain>,
    transaction: impl CstDecode<crate::api::types::BdkTransaction>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_blockchain_broadcast",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_transaction = transaction.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok = crate::api::blockchain::BdkBlockchain::broadcast(
                        api_ptr,
                        &api_transaction,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__blockchain__bdk_blockchain_create_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blockchain_config: impl CstDecode<crate::api::blockchain::BlockchainConfig>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_blockchain_create",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_blockchain_config = blockchain_config.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok =
                        crate::api::blockchain::BdkBlockchain::create(api_blockchain_config)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__blockchain__bdk_blockchain_estimate_fee_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::blockchain::BdkBlockchain>,
    target: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_blockchain_estimate_fee",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_target = target.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok =
                        crate::api::blockchain::BdkBlockchain::estimate_fee(&api_that, api_target)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__blockchain__bdk_blockchain_get_block_hash_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::blockchain::BdkBlockchain>,
    height: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_blockchain_get_block_hash",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_height = height.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok = crate::api::blockchain::BdkBlockchain::get_block_hash(
                        &api_that, api_height,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__blockchain__bdk_blockchain_get_height_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::blockchain::BdkBlockchain>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_blockchain_get_height",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok = crate::api::blockchain::BdkBlockchain::get_height(&api_that)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_as_string_impl(
    that: impl CstDecode<crate::api::descriptor::BdkDescriptor>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::descriptor::BdkDescriptor::as_string(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_create_impl(
    descriptor: impl CstDecode<String>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_create",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_descriptor = descriptor.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok =
                    crate::api::descriptor::BdkDescriptor::create(api_descriptor, api_network)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_max_satisfaction_weight_impl(
    that: impl CstDecode<crate::api::descriptor::BdkDescriptor>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_max_satisfaction_weight",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok =
                    crate::api::descriptor::BdkDescriptor::max_satisfaction_weight(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_new_bip44_impl(
    secret_key: impl CstDecode<crate::api::key::BdkDescriptorSecretKey>,
    keychain_kind: impl CstDecode<crate::api::types::KeychainKind>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_new_bip44",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_secret_key = secret_key.cst_decode();
            let api_keychain_kind = keychain_kind.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::descriptor::BdkDescriptor::new_bip44(
                    api_secret_key,
                    api_keychain_kind,
                    api_network,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_new_bip44_public_impl(
    public_key: impl CstDecode<crate::api::key::BdkDescriptorPublicKey>,
    fingerprint: impl CstDecode<String>,
    keychain_kind: impl CstDecode<crate::api::types::KeychainKind>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_new_bip44_public",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_public_key = public_key.cst_decode();
            let api_fingerprint = fingerprint.cst_decode();
            let api_keychain_kind = keychain_kind.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::descriptor::BdkDescriptor::new_bip44_public(
                    api_public_key,
                    api_fingerprint,
                    api_keychain_kind,
                    api_network,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_new_bip49_impl(
    secret_key: impl CstDecode<crate::api::key::BdkDescriptorSecretKey>,
    keychain_kind: impl CstDecode<crate::api::types::KeychainKind>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_new_bip49",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_secret_key = secret_key.cst_decode();
            let api_keychain_kind = keychain_kind.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::descriptor::BdkDescriptor::new_bip49(
                    api_secret_key,
                    api_keychain_kind,
                    api_network,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_new_bip49_public_impl(
    public_key: impl CstDecode<crate::api::key::BdkDescriptorPublicKey>,
    fingerprint: impl CstDecode<String>,
    keychain_kind: impl CstDecode<crate::api::types::KeychainKind>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_new_bip49_public",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_public_key = public_key.cst_decode();
            let api_fingerprint = fingerprint.cst_decode();
            let api_keychain_kind = keychain_kind.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::descriptor::BdkDescriptor::new_bip49_public(
                    api_public_key,
                    api_fingerprint,
                    api_keychain_kind,
                    api_network,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_new_bip84_impl(
    secret_key: impl CstDecode<crate::api::key::BdkDescriptorSecretKey>,
    keychain_kind: impl CstDecode<crate::api::types::KeychainKind>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_new_bip84",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_secret_key = secret_key.cst_decode();
            let api_keychain_kind = keychain_kind.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::descriptor::BdkDescriptor::new_bip84(
                    api_secret_key,
                    api_keychain_kind,
                    api_network,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_new_bip84_public_impl(
    public_key: impl CstDecode<crate::api::key::BdkDescriptorPublicKey>,
    fingerprint: impl CstDecode<String>,
    keychain_kind: impl CstDecode<crate::api::types::KeychainKind>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_new_bip84_public",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_public_key = public_key.cst_decode();
            let api_fingerprint = fingerprint.cst_decode();
            let api_keychain_kind = keychain_kind.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::descriptor::BdkDescriptor::new_bip84_public(
                    api_public_key,
                    api_fingerprint,
                    api_keychain_kind,
                    api_network,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_new_bip86_impl(
    secret_key: impl CstDecode<crate::api::key::BdkDescriptorSecretKey>,
    keychain_kind: impl CstDecode<crate::api::types::KeychainKind>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_new_bip86",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_secret_key = secret_key.cst_decode();
            let api_keychain_kind = keychain_kind.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::descriptor::BdkDescriptor::new_bip86(
                    api_secret_key,
                    api_keychain_kind,
                    api_network,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_new_bip86_public_impl(
    public_key: impl CstDecode<crate::api::key::BdkDescriptorPublicKey>,
    fingerprint: impl CstDecode<String>,
    keychain_kind: impl CstDecode<crate::api::types::KeychainKind>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_new_bip86_public",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_public_key = public_key.cst_decode();
            let api_fingerprint = fingerprint.cst_decode();
            let api_keychain_kind = keychain_kind.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::descriptor::BdkDescriptor::new_bip86_public(
                    api_public_key,
                    api_fingerprint,
                    api_keychain_kind,
                    api_network,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__descriptor__bdk_descriptor_to_string_private_impl(
    that: impl CstDecode<crate::api::descriptor::BdkDescriptor>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_to_string_private",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::descriptor::BdkDescriptor::to_string_private(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_derivation_path_as_string_impl(
    that: impl CstDecode<crate::api::key::BdkDerivationPath>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_derivation_path_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::key::BdkDerivationPath::as_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_derivation_path_from_string_impl(
    path: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_derivation_path_from_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_path = path.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkDerivationPath::from_string(api_path)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_public_key_as_string_impl(
    that: impl CstDecode<crate::api::key::BdkDescriptorPublicKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_public_key_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::key::BdkDescriptorPublicKey::as_string(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_public_key_derive_impl(
    ptr: impl CstDecode<crate::api::key::BdkDescriptorPublicKey>,
    path: impl CstDecode<crate::api::key::BdkDerivationPath>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_public_key_derive",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_path = path.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkDescriptorPublicKey::derive(api_ptr, api_path)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_public_key_extend_impl(
    ptr: impl CstDecode<crate::api::key::BdkDescriptorPublicKey>,
    path: impl CstDecode<crate::api::key::BdkDerivationPath>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_public_key_extend",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_path = path.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkDescriptorPublicKey::extend(api_ptr, api_path)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_public_key_from_string_impl(
    public_key: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_public_key_from_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_public_key = public_key.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok =
                    crate::api::key::BdkDescriptorPublicKey::from_string(api_public_key)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_secret_key_as_public_impl(
    ptr: impl CstDecode<crate::api::key::BdkDescriptorSecretKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_secret_key_as_public",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkDescriptorSecretKey::as_public(api_ptr)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_secret_key_as_string_impl(
    that: impl CstDecode<crate::api::key::BdkDescriptorSecretKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_secret_key_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::key::BdkDescriptorSecretKey::as_string(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_secret_key_create_impl(
    network: impl CstDecode<crate::api::types::Network>,
    mnemonic: impl CstDecode<crate::api::key::BdkMnemonic>,
    password: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_secret_key_create",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_network = network.cst_decode();
            let api_mnemonic = mnemonic.cst_decode();
            let api_password = password.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkDescriptorSecretKey::create(
                    api_network,
                    api_mnemonic,
                    api_password,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_secret_key_derive_impl(
    ptr: impl CstDecode<crate::api::key::BdkDescriptorSecretKey>,
    path: impl CstDecode<crate::api::key::BdkDerivationPath>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_secret_key_derive",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_path = path.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkDescriptorSecretKey::derive(api_ptr, api_path)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_secret_key_extend_impl(
    ptr: impl CstDecode<crate::api::key::BdkDescriptorSecretKey>,
    path: impl CstDecode<crate::api::key::BdkDerivationPath>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_secret_key_extend",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_path = path.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkDescriptorSecretKey::extend(api_ptr, api_path)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_secret_key_from_string_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    secret_key: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_secret_key_from_string",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_secret_key = secret_key.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok =
                        crate::api::key::BdkDescriptorSecretKey::from_string(api_secret_key)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__key__bdk_descriptor_secret_key_secret_bytes_impl(
    that: impl CstDecode<crate::api::key::BdkDescriptorSecretKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_descriptor_secret_key_secret_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkDescriptorSecretKey::secret_bytes(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_mnemonic_as_string_impl(
    that: impl CstDecode<crate::api::key::BdkMnemonic>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_mnemonic_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::key::BdkMnemonic::as_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_mnemonic_create_impl(
    word_count: impl CstDecode<crate::api::types::WordCount>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_mnemonic_create",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_word_count = word_count.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkMnemonic::create(api_word_count)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_mnemonic_from_entropy_impl(
    entropy: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_mnemonic_from_entropy",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_entropy = entropy.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkMnemonic::from_entropy(api_entropy)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__key__bdk_mnemonic_from_string_impl(
    mnemonic: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_mnemonic_from_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_mnemonic = mnemonic.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::key::BdkMnemonic::from_string(api_mnemonic)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__psbt__bdk_psbt_as_string_impl(
    that: impl CstDecode<crate::api::psbt::BdkPsbt>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_psbt_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::psbt::BdkPsbt::as_string(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__psbt__bdk_psbt_combine_impl(
    ptr: impl CstDecode<crate::api::psbt::BdkPsbt>,
    other: impl CstDecode<crate::api::psbt::BdkPsbt>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_psbt_combine",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::psbt::BdkPsbt::combine(api_ptr, api_other)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__psbt__bdk_psbt_extract_tx_impl(
    ptr: impl CstDecode<crate::api::psbt::BdkPsbt>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_psbt_extract_tx",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::psbt::BdkPsbt::extract_tx(api_ptr)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__psbt__bdk_psbt_fee_amount_impl(
    that: impl CstDecode<crate::api::psbt::BdkPsbt>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_psbt_fee_amount",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::psbt::BdkPsbt::fee_amount(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__psbt__bdk_psbt_fee_rate_impl(
    that: impl CstDecode<crate::api::psbt::BdkPsbt>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_psbt_fee_rate",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::psbt::BdkPsbt::fee_rate(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__psbt__bdk_psbt_from_str_impl(
    psbt_base64: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_psbt_from_str",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_psbt_base64 = psbt_base64.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::psbt::BdkPsbt::from_str(api_psbt_base64)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__psbt__bdk_psbt_json_serialize_impl(
    that: impl CstDecode<crate::api::psbt::BdkPsbt>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_psbt_json_serialize",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::psbt::BdkPsbt::json_serialize(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__psbt__bdk_psbt_serialize_impl(
    that: impl CstDecode<crate::api::psbt::BdkPsbt>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_psbt_serialize",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::psbt::BdkPsbt::serialize(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__psbt__bdk_psbt_txid_impl(
    that: impl CstDecode<crate::api::psbt::BdkPsbt>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_psbt_txid",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::psbt::BdkPsbt::txid(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_address_as_string_impl(
    that: impl CstDecode<crate::api::types::BdkAddress>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_address_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::types::BdkAddress::as_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_address_from_script_impl(
    script: impl CstDecode<crate::api::types::BdkScriptBuf>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_address_from_script",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_script = script.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok =
                    crate::api::types::BdkAddress::from_script(api_script, api_network)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_address_from_string_impl(
    address: impl CstDecode<String>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_address_from_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_address = address.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok =
                    crate::api::types::BdkAddress::from_string(api_address, api_network)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_address_is_valid_for_network_impl(
    that: impl CstDecode<crate::api::types::BdkAddress>,
    network: impl CstDecode<crate::api::types::Network>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_address_is_valid_for_network",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_network = network.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::types::BdkAddress::is_valid_for_network(&api_that, api_network),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_address_network_impl(
    that: impl CstDecode<crate::api::types::BdkAddress>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_address_network",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::types::BdkAddress::network(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_address_payload_impl(
    that: impl CstDecode<crate::api::types::BdkAddress>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_address_payload",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::types::BdkAddress::payload(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_address_script_impl(
    ptr: impl CstDecode<crate::api::types::BdkAddress>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_address_script",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::types::BdkAddress::script(api_ptr))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_address_to_qr_uri_impl(
    that: impl CstDecode<crate::api::types::BdkAddress>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_address_to_qr_uri",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::types::BdkAddress::to_qr_uri(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_policy_as_string_impl(
    that: impl CstDecode<crate::api::types::BdkPolicy>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_policy_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkPolicy::as_string(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_policy_contribution_impl(
    that: impl CstDecode<crate::api::types::BdkPolicy>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_policy_contribution",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::types::BdkPolicy::contribution(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_policy_id_impl(
    that: impl CstDecode<crate::api::types::BdkPolicy>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_policy_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::types::BdkPolicy::id(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_policy_item_impl(
    that: impl CstDecode<crate::api::types::BdkPolicy>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_policy_item",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::types::BdkPolicy::item(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_policy_requires_path_impl(
    that: impl CstDecode<crate::api::types::BdkPolicy>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_policy_requires_path",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::types::BdkPolicy::requires_path(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_policy_satisfaction_impl(
    that: impl CstDecode<crate::api::types::BdkPolicy>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_policy_satisfaction",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::types::BdkPolicy::satisfaction(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_script_buf_as_string_impl(
    that: impl CstDecode<crate::api::types::BdkScriptBuf>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_script_buf_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::types::BdkScriptBuf::as_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_script_buf_empty_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_script_buf_empty",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::types::BdkScriptBuf::empty())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_script_buf_from_hex_impl(
    s: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_script_buf_from_hex",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_s = s.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkScriptBuf::from_hex(api_s)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_script_buf_with_capacity_impl(
    capacity: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_script_buf_with_capacity",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_capacity = capacity.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::types::BdkScriptBuf::with_capacity(api_capacity),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_create_impl(
    version: impl CstDecode<i32>,
    lock_time: impl CstDecode<crate::api::types::LockTime>,
    input: impl CstDecode<Vec<crate::api::types::BdkTxIn>>,
    output: impl CstDecode<Vec<crate::api::types::BdkTxOut>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_create",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_version = version.cst_decode();
            let api_lock_time = lock_time.cst_decode();
            let api_input = input.cst_decode();
            let api_output = output.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::create(
                    api_version,
                    api_lock_time,
                    api_input,
                    api_output,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_from_bytes_impl(
    transaction_bytes: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_from_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_transaction_bytes = transaction_bytes.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok =
                    crate::api::types::BdkTransaction::from_bytes(api_transaction_bytes)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_input_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_input",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::input(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_is_coin_base_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_is_coin_base",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::is_coin_base(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_is_explicitly_rbf_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_is_explicitly_rbf",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::is_explicitly_rbf(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_is_lock_time_enabled_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_is_lock_time_enabled",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::is_lock_time_enabled(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_lock_time_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_lock_time",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::lock_time(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_output_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_output",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::output(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_serialize_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_serialize",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::serialize(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_size_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_size",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::size(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_txid_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_txid",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::txid(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_version_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_version",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::version(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_vsize_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_vsize",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::vsize(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__types__bdk_transaction_weight_impl(
    that: impl CstDecode<crate::api::types::BdkTransaction>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_transaction_weight",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::types::BdkTransaction::weight(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_create_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    descriptor: impl CstDecode<crate::api::descriptor::BdkDescriptor>,
    change_descriptor: impl CstDecode<Option<crate::api::descriptor::BdkDescriptor>>,
    network: impl CstDecode<crate::api::types::Network>,
    database_config: impl CstDecode<crate::api::types::DatabaseConfig>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_create",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_descriptor = descriptor.cst_decode();
            let api_change_descriptor = change_descriptor.cst_decode();
            let api_network = network.cst_decode();
            let api_database_config = database_config.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok = crate::api::wallet::BdkWallet::create(
                        api_descriptor,
                        api_change_descriptor,
                        api_network,
                        api_database_config,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_get_address_impl(
    ptr: impl CstDecode<crate::api::wallet::BdkWallet>,
    address_index: impl CstDecode<crate::api::types::AddressIndex>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_get_address",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_address_index = address_index.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok =
                    crate::api::wallet::BdkWallet::get_address(api_ptr, api_address_index)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_get_balance_impl(
    that: impl CstDecode<crate::api::wallet::BdkWallet>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_get_balance",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::wallet::BdkWallet::get_balance(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_get_descriptor_for_keychain_impl(
    ptr: impl CstDecode<crate::api::wallet::BdkWallet>,
    keychain: impl CstDecode<crate::api::types::KeychainKind>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_get_descriptor_for_keychain",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_keychain = keychain.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::wallet::BdkWallet::get_descriptor_for_keychain(
                    api_ptr,
                    api_keychain,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_get_internal_address_impl(
    ptr: impl CstDecode<crate::api::wallet::BdkWallet>,
    address_index: impl CstDecode<crate::api::types::AddressIndex>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_get_internal_address",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_address_index = address_index.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::wallet::BdkWallet::get_internal_address(
                    api_ptr,
                    api_address_index,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_get_psbt_input_impl(
    that: impl CstDecode<crate::api::wallet::BdkWallet>,
    utxo: impl CstDecode<crate::api::types::LocalUtxo>,
    only_witness_utxo: impl CstDecode<bool>,
    sighash_type: impl CstDecode<Option<crate::api::types::PsbtSigHashType>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_get_psbt_input",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_utxo = utxo.cst_decode();
            let api_only_witness_utxo = only_witness_utxo.cst_decode();
            let api_sighash_type = sighash_type.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::wallet::BdkWallet::get_psbt_input(
                    &api_that,
                    api_utxo,
                    api_only_witness_utxo,
                    api_sighash_type,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_is_mine_impl(
    ptr: impl CstDecode<crate::api::wallet::BdkWallet>,
    script: impl CstDecode<crate::api::types::BdkScriptBuf>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_is_mine",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_script = script.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::wallet::BdkWallet::is_mine(api_ptr, api_script)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_list_transactions_impl(
    that: impl CstDecode<crate::api::wallet::BdkWallet>,
    include_raw: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_list_transactions",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_include_raw = include_raw.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok =
                    crate::api::wallet::BdkWallet::list_transactions(&api_that, api_include_raw)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_list_unspent_impl(
    that: impl CstDecode<crate::api::wallet::BdkWallet>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_list_unspent",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::wallet::BdkWallet::list_unspent(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_network_impl(
    that: impl CstDecode<crate::api::wallet::BdkWallet>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_network",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::wallet::BdkWallet::network(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_policies_impl(
    ptr: impl CstDecode<crate::api::wallet::BdkWallet>,
    keychain: impl CstDecode<crate::api::types::KeychainKind>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_policies",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_keychain = keychain.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok = crate::api::wallet::BdkWallet::policies(api_ptr, api_keychain)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_sign_impl(
    ptr: impl CstDecode<crate::api::wallet::BdkWallet>,
    psbt: impl CstDecode<crate::api::psbt::BdkPsbt>,
    sign_options: impl CstDecode<Option<crate::api::types::SignOptions>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_sign",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_psbt = psbt.cst_decode();
            let api_sign_options = sign_options.cst_decode();
            transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                let output_ok =
                    crate::api::wallet::BdkWallet::sign(api_ptr, api_psbt, api_sign_options)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__wallet__bdk_wallet_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr: impl CstDecode<crate::api::wallet::BdkWallet>,
    blockchain: impl CstDecode<crate::api::blockchain::BdkBlockchain>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bdk_wallet_sync",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_ptr = ptr.cst_decode();
            let api_blockchain = blockchain.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok = crate::api::wallet::BdkWallet::sync(api_ptr, &api_blockchain)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__wallet__finish_bump_fee_tx_builder_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    txid: impl CstDecode<String>,
    fee_rate: impl CstDecode<f32>,
    allow_shrinking: impl CstDecode<Option<crate::api::types::BdkAddress>>,
    wallet: impl CstDecode<crate::api::wallet::BdkWallet>,
    enable_rbf: impl CstDecode<bool>,
    n_sequence: impl CstDecode<Option<u32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "finish_bump_fee_tx_builder",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_txid = txid.cst_decode();
            let api_fee_rate = fee_rate.cst_decode();
            let api_allow_shrinking = allow_shrinking.cst_decode();
            let api_wallet = wallet.cst_decode();
            let api_enable_rbf = enable_rbf.cst_decode();
            let api_n_sequence = n_sequence.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok = crate::api::wallet::finish_bump_fee_tx_builder(
                        api_txid,
                        api_fee_rate,
                        api_allow_shrinking,
                        api_wallet,
                        api_enable_rbf,
                        api_n_sequence,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__wallet__tx_builder_finish_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wallet: impl CstDecode<crate::api::wallet::BdkWallet>,
    recipients: impl CstDecode<Vec<crate::api::types::ScriptAmount>>,
    utxos: impl CstDecode<Vec<crate::api::types::OutPoint>>,
    foreign_utxo: impl CstDecode<Option<(crate::api::types::OutPoint, crate::api::types::Input, usize)>>,
    un_spendable: impl CstDecode<Vec<crate::api::types::OutPoint>>,
    change_policy: impl CstDecode<crate::api::types::ChangeSpendPolicy>,
    manually_selected_only: impl CstDecode<bool>,
    fee_rate: impl CstDecode<Option<f32>>,
    fee_absolute: impl CstDecode<Option<u64>>,
    drain_wallet: impl CstDecode<bool>,
    drain_to: impl CstDecode<Option<crate::api::types::BdkScriptBuf>>,
    rbf: impl CstDecode<Option<crate::api::types::RbfValue>>,
    internal_policy_path: impl CstDecode<Option<std::collections::HashMap<String, Vec<u32>>>>,
    external_policy_path: impl CstDecode<Option<std::collections::HashMap<String, Vec<u32>>>>,
    data: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "tx_builder_finish",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wallet = wallet.cst_decode();
            let api_recipients = recipients.cst_decode();
            let api_utxos = utxos.cst_decode();
            let api_foreign_utxo = foreign_utxo.cst_decode();
            let api_un_spendable = un_spendable.cst_decode();
            let api_change_policy = change_policy.cst_decode();
            let api_manually_selected_only = manually_selected_only.cst_decode();
            let api_fee_rate = fee_rate.cst_decode();
            let api_fee_absolute = fee_absolute.cst_decode();
            let api_drain_wallet = drain_wallet.cst_decode();
            let api_drain_to = drain_to.cst_decode();
            let api_rbf = rbf.cst_decode();
            let api_internal_policy_path = internal_policy_path.cst_decode();
            let api_external_policy_path = external_policy_path.cst_decode();
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::error::BdkError>((move || {
                    let output_ok = crate::api::wallet::tx_builder_finish(
                        api_wallet,
                        api_recipients,
                        api_utxos,
                        api_foreign_utxo,
                        api_un_spendable,
                        api_change_policy,
                        api_manually_selected_only,
                        api_fee_rate,
                        api_fee_absolute,
                        api_drain_wallet,
                        api_drain_to,
                        api_rbf,
                        api_internal_policy_path,
                        api_external_policy_path,
                        api_data,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<crate::api::types::ChangeSpendPolicy> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::ChangeSpendPolicy {
        match self {
            0 => crate::api::types::ChangeSpendPolicy::ChangeAllowed,
            1 => crate::api::types::ChangeSpendPolicy::OnlyChange,
            2 => crate::api::types::ChangeSpendPolicy::ChangeForbidden,
            _ => unreachable!("Invalid variant for ChangeSpendPolicy: {}", self),
        }
    }
}
impl CstDecode<f32> for f32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f32 {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<crate::api::types::KeychainKind> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::KeychainKind {
        match self {
            0 => crate::api::types::KeychainKind::ExternalChain,
            1 => crate::api::types::KeychainKind::InternalChain,
            _ => unreachable!("Invalid variant for KeychainKind: {}", self),
        }
    }
}
impl CstDecode<crate::api::types::Network> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Network {
        match self {
            0 => crate::api::types::Network::Testnet,
            1 => crate::api::types::Network::Regtest,
            2 => crate::api::types::Network::Bitcoin,
            3 => crate::api::types::Network::Signet,
            _ => unreachable!("Invalid variant for Network: {}", self),
        }
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl CstDecode<crate::api::types::Variant> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Variant {
        match self {
            0 => crate::api::types::Variant::Bech32,
            1 => crate::api::types::Variant::Bech32m,
            _ => unreachable!("Invalid variant for Variant: {}", self),
        }
    }
}
impl CstDecode<crate::api::types::WitnessVersion> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::WitnessVersion {
        match self {
            0 => crate::api::types::WitnessVersion::V0,
            1 => crate::api::types::WitnessVersion::V1,
            2 => crate::api::types::WitnessVersion::V2,
            3 => crate::api::types::WitnessVersion::V3,
            4 => crate::api::types::WitnessVersion::V4,
            5 => crate::api::types::WitnessVersion::V5,
            6 => crate::api::types::WitnessVersion::V6,
            7 => crate::api::types::WitnessVersion::V7,
            8 => crate::api::types::WitnessVersion::V8,
            9 => crate::api::types::WitnessVersion::V9,
            10 => crate::api::types::WitnessVersion::V10,
            11 => crate::api::types::WitnessVersion::V11,
            12 => crate::api::types::WitnessVersion::V12,
            13 => crate::api::types::WitnessVersion::V13,
            14 => crate::api::types::WitnessVersion::V14,
            15 => crate::api::types::WitnessVersion::V15,
            16 => crate::api::types::WitnessVersion::V16,
            _ => unreachable!("Invalid variant for WitnessVersion: {}", self),
        }
    }
}
impl CstDecode<crate::api::types::WordCount> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::WordCount {
        match self {
            0 => crate::api::types::WordCount::Words12,
            1 => crate::api::types::WordCount::Words18,
            2 => crate::api::types::WordCount::Words24,
            _ => unreachable!("Invalid variant for WordCount: {}", self),
        }
    }
}
impl SseDecode for std::collections::HashMap<String, Vec<u32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, Vec<u32>)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<Vec<u32>, Vec<crate::api::types::Condition>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<(Vec<u32>, Vec<crate::api::types::Condition>)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<u32, Vec<crate::api::types::Condition>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(u32, Vec<crate::api::types::Condition>)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for RustOpaqueNom<bdk::bitcoin::Address> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bdk::bitcoin::bip32::DerivationPath> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bdk::blockchain::AnyBlockchain> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bdk::descriptor::ExtendedDescriptor> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bdk::descriptor::Policy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bdk::keys::DescriptorPublicKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bdk::keys::DescriptorSecretKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bdk::keys::KeyMap> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bdk::keys::bip39::Mnemonic> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<std::sync::Mutex<bdk::Wallet<bdk::database::AnyDatabase>>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<std::sync::Mutex<bdk::bitcoin::psbt::PartiallySignedTransaction>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::error::AddressError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::AddressError::Base58(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::AddressError::Bech32(var_field0);
            }
            2 => {
                return crate::api::error::AddressError::EmptyBech32Payload;
            }
            3 => {
                let mut var_expected = <crate::api::types::Variant>::sse_decode(deserializer);
                let mut var_found = <crate::api::types::Variant>::sse_decode(deserializer);
                return crate::api::error::AddressError::InvalidBech32Variant {
                    expected: var_expected,
                    found: var_found,
                };
            }
            4 => {
                let mut var_field0 = <u8>::sse_decode(deserializer);
                return crate::api::error::AddressError::InvalidWitnessVersion(var_field0);
            }
            5 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::AddressError::UnparsableWitnessVersion(var_field0);
            }
            6 => {
                return crate::api::error::AddressError::MalformedWitnessVersion;
            }
            7 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                return crate::api::error::AddressError::InvalidWitnessProgramLength(var_field0);
            }
            8 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                return crate::api::error::AddressError::InvalidSegwitV0ProgramLength(var_field0);
            }
            9 => {
                return crate::api::error::AddressError::UncompressedPubkey;
            }
            10 => {
                return crate::api::error::AddressError::ExcessiveScriptSize;
            }
            11 => {
                return crate::api::error::AddressError::UnrecognizedScript;
            }
            12 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::AddressError::UnknownAddressType(var_field0);
            }
            13 => {
                let mut var_networkRequired =
                    <crate::api::types::Network>::sse_decode(deserializer);
                let mut var_networkFound = <crate::api::types::Network>::sse_decode(deserializer);
                let mut var_address = <String>::sse_decode(deserializer);
                return crate::api::error::AddressError::NetworkValidation {
                    network_required: var_networkRequired,
                    network_found: var_networkFound,
                    address: var_address,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::types::AddressIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::types::AddressIndex::Increase;
            }
            1 => {
                return crate::api::types::AddressIndex::LastUnused;
            }
            2 => {
                let mut var_index = <u32>::sse_decode(deserializer);
                return crate::api::types::AddressIndex::Peek { index: var_index };
            }
            3 => {
                let mut var_index = <u32>::sse_decode(deserializer);
                return crate::api::types::AddressIndex::Reset { index: var_index };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::blockchain::Auth {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::blockchain::Auth::None;
            }
            1 => {
                let mut var_username = <String>::sse_decode(deserializer);
                let mut var_password = <String>::sse_decode(deserializer);
                return crate::api::blockchain::Auth::UserPass {
                    username: var_username,
                    password: var_password,
                };
            }
            2 => {
                let mut var_file = <String>::sse_decode(deserializer);
                return crate::api::blockchain::Auth::Cookie { file: var_file };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::types::Balance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_immature = <u64>::sse_decode(deserializer);
        let mut var_trustedPending = <u64>::sse_decode(deserializer);
        let mut var_untrustedPending = <u64>::sse_decode(deserializer);
        let mut var_confirmed = <u64>::sse_decode(deserializer);
        let mut var_spendable = <u64>::sse_decode(deserializer);
        let mut var_total = <u64>::sse_decode(deserializer);
        return crate::api::types::Balance {
            immature: var_immature,
            trusted_pending: var_trustedPending,
            untrusted_pending: var_untrustedPending,
            confirmed: var_confirmed,
            spendable: var_spendable,
            total: var_total,
        };
    }
}

impl SseDecode for crate::api::types::BdkAddress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ptr = <RustOpaqueNom<bdk::bitcoin::Address>>::sse_decode(deserializer);
        return crate::api::types::BdkAddress { ptr: var_ptr };
    }
}

impl SseDecode for crate::api::blockchain::BdkBlockchain {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ptr = <RustOpaqueNom<bdk::blockchain::AnyBlockchain>>::sse_decode(deserializer);
        return crate::api::blockchain::BdkBlockchain { ptr: var_ptr };
    }
}

impl SseDecode for crate::api::key::BdkDerivationPath {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ptr =
            <RustOpaqueNom<bdk::bitcoin::bip32::DerivationPath>>::sse_decode(deserializer);
        return crate::api::key::BdkDerivationPath { ptr: var_ptr };
    }
}

impl SseDecode for crate::api::descriptor::BdkDescriptor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_extendedDescriptor =
            <RustOpaqueNom<bdk::descriptor::ExtendedDescriptor>>::sse_decode(deserializer);
        let mut var_keyMap = <RustOpaqueNom<bdk::keys::KeyMap>>::sse_decode(deserializer);
        return crate::api::descriptor::BdkDescriptor {
            extended_descriptor: var_extendedDescriptor,
            key_map: var_keyMap,
        };
    }
}

impl SseDecode for crate::api::key::BdkDescriptorPublicKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ptr = <RustOpaqueNom<bdk::keys::DescriptorPublicKey>>::sse_decode(deserializer);
        return crate::api::key::BdkDescriptorPublicKey { ptr: var_ptr };
    }
}

impl SseDecode for crate::api::key::BdkDescriptorSecretKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ptr = <RustOpaqueNom<bdk::keys::DescriptorSecretKey>>::sse_decode(deserializer);
        return crate::api::key::BdkDescriptorSecretKey { ptr: var_ptr };
    }
}

impl SseDecode for crate::api::error::BdkError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::error::HexError>::sse_decode(deserializer);
                return crate::api::error::BdkError::Hex(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::error::ConsensusError>::sse_decode(deserializer);
                return crate::api::error::BdkError::Consensus(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::VerifyTransaction(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::error::AddressError>::sse_decode(deserializer);
                return crate::api::error::BdkError::Address(var_field0);
            }
            4 => {
                let mut var_field0 = <crate::api::error::DescriptorError>::sse_decode(deserializer);
                return crate::api::error::BdkError::Descriptor(var_field0);
            }
            5 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::error::BdkError::InvalidU32Bytes(var_field0);
            }
            6 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Generic(var_field0);
            }
            7 => {
                return crate::api::error::BdkError::ScriptDoesntHaveAddressForm;
            }
            8 => {
                return crate::api::error::BdkError::NoRecipients;
            }
            9 => {
                return crate::api::error::BdkError::NoUtxosSelected;
            }
            10 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                return crate::api::error::BdkError::OutputBelowDustLimit(var_field0);
            }
            11 => {
                let mut var_needed = <u64>::sse_decode(deserializer);
                let mut var_available = <u64>::sse_decode(deserializer);
                return crate::api::error::BdkError::InsufficientFunds {
                    needed: var_needed,
                    available: var_available,
                };
            }
            12 => {
                return crate::api::error::BdkError::BnBTotalTriesExceeded;
            }
            13 => {
                return crate::api::error::BdkError::BnBNoExactMatch;
            }
            14 => {
                return crate::api::error::BdkError::UnknownUtxo;
            }
            15 => {
                return crate::api::error::BdkError::TransactionNotFound;
            }
            16 => {
                return crate::api::error::BdkError::TransactionConfirmed;
            }
            17 => {
                return crate::api::error::BdkError::IrreplaceableTransaction;
            }
            18 => {
                let mut var_needed = <f32>::sse_decode(deserializer);
                return crate::api::error::BdkError::FeeRateTooLow { needed: var_needed };
            }
            19 => {
                let mut var_needed = <u64>::sse_decode(deserializer);
                return crate::api::error::BdkError::FeeTooLow { needed: var_needed };
            }
            20 => {
                return crate::api::error::BdkError::FeeRateUnavailable;
            }
            21 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::MissingKeyOrigin(var_field0);
            }
            22 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Key(var_field0);
            }
            23 => {
                return crate::api::error::BdkError::ChecksumMismatch;
            }
            24 => {
                let mut var_field0 = <crate::api::types::KeychainKind>::sse_decode(deserializer);
                return crate::api::error::BdkError::SpendingPolicyRequired(var_field0);
            }
            25 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::InvalidPolicyPathError(var_field0);
            }
            26 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Signer(var_field0);
            }
            27 => {
                let mut var_requested = <crate::api::types::Network>::sse_decode(deserializer);
                let mut var_found = <crate::api::types::Network>::sse_decode(deserializer);
                return crate::api::error::BdkError::InvalidNetwork {
                    requested: var_requested,
                    found: var_found,
                };
            }
            28 => {
                let mut var_field0 = <crate::api::types::OutPoint>::sse_decode(deserializer);
                return crate::api::error::BdkError::InvalidOutpoint(var_field0);
            }
            29 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Encode(var_field0);
            }
            30 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Miniscript(var_field0);
            }
            31 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::MiniscriptPsbt(var_field0);
            }
            32 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Bip32(var_field0);
            }
            33 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Bip39(var_field0);
            }
            34 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Secp256k1(var_field0);
            }
            35 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Json(var_field0);
            }
            36 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Psbt(var_field0);
            }
            37 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::PsbtParse(var_field0);
            }
            38 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                let mut var_field1 = <usize>::sse_decode(deserializer);
                return crate::api::error::BdkError::MissingCachedScripts(var_field0, var_field1);
            }
            39 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Electrum(var_field0);
            }
            40 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Esplora(var_field0);
            }
            41 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Sled(var_field0);
            }
            42 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Rpc(var_field0);
            }
            43 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::Rusqlite(var_field0);
            }
            44 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::InvalidInput(var_field0);
            }
            45 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::InvalidLockTime(var_field0);
            }
            46 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::BdkError::InvalidTransaction(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::key::BdkMnemonic {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ptr = <RustOpaqueNom<bdk::keys::bip39::Mnemonic>>::sse_decode(deserializer);
        return crate::api::key::BdkMnemonic { ptr: var_ptr };
    }
}

impl SseDecode for crate::api::types::BdkPolicy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ptr = <RustOpaqueNom<bdk::descriptor::Policy>>::sse_decode(deserializer);
        return crate::api::types::BdkPolicy { ptr: var_ptr };
    }
}

impl SseDecode for crate::api::psbt::BdkPsbt {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ptr = <RustOpaqueNom<
            std::sync::Mutex<bdk::bitcoin::psbt::PartiallySignedTransaction>,
        >>::sse_decode(deserializer);
        return crate::api::psbt::BdkPsbt { ptr: var_ptr };
    }
}

impl SseDecode for crate::api::types::BdkScriptBuf {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bytes = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::types::BdkScriptBuf { bytes: var_bytes };
    }
}

impl SseDecode for crate::api::types::BdkTransaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_s = <String>::sse_decode(deserializer);
        return crate::api::types::BdkTransaction { s: var_s };
    }
}

impl SseDecode for crate::api::types::BdkTransactionDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_transaction =
            <Option<crate::api::types::BdkTransaction>>::sse_decode(deserializer);
        let mut var_txid = <String>::sse_decode(deserializer);
        let mut var_received = <u64>::sse_decode(deserializer);
        let mut var_sent = <u64>::sse_decode(deserializer);
        let mut var_fee = <Option<u64>>::sse_decode(deserializer);
        let mut var_confirmationTime =
            <Option<crate::api::types::BlockTime>>::sse_decode(deserializer);
        return crate::api::types::BdkTransactionDetails {
            transaction: var_transaction,
            txid: var_txid,
            received: var_received,
            sent: var_sent,
            fee: var_fee,
            confirmation_time: var_confirmationTime,
        };
    }
}

impl SseDecode for crate::api::types::BdkTxIn {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_previousOutput = <crate::api::types::OutPoint>::sse_decode(deserializer);
        let mut var_scriptSig = <Option<crate::api::types::BdkScriptBuf>>::sse_decode(deserializer);
        let mut var_sequence = <u32>::sse_decode(deserializer);
        let mut var_witness = <Vec<Vec<u8>>>::sse_decode(deserializer);
        return crate::api::types::BdkTxIn {
            previous_output: var_previousOutput,
            script_sig: var_scriptSig,
            sequence: var_sequence,
            witness: var_witness,
        };
    }
}

impl SseDecode for crate::api::types::BdkTxOut {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u64>::sse_decode(deserializer);
        let mut var_scriptPubkey = <crate::api::types::BdkScriptBuf>::sse_decode(deserializer);
        return crate::api::types::BdkTxOut {
            value: var_value,
            script_pubkey: var_scriptPubkey,
        };
    }
}

impl SseDecode for crate::api::wallet::BdkWallet {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ptr =
            <RustOpaqueNom<std::sync::Mutex<bdk::Wallet<bdk::database::AnyDatabase>>>>::sse_decode(
                deserializer,
            );
        return crate::api::wallet::BdkWallet { ptr: var_ptr };
    }
}

impl SseDecode for crate::api::types::BlockTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_height = <u32>::sse_decode(deserializer);
        let mut var_timestamp = <u64>::sse_decode(deserializer);
        return crate::api::types::BlockTime {
            height: var_height,
            timestamp: var_timestamp,
        };
    }
}

impl SseDecode for crate::api::blockchain::BlockchainConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_config =
                    <crate::api::blockchain::ElectrumConfig>::sse_decode(deserializer);
                return crate::api::blockchain::BlockchainConfig::Electrum { config: var_config };
            }
            1 => {
                let mut var_config =
                    <crate::api::blockchain::EsploraConfig>::sse_decode(deserializer);
                return crate::api::blockchain::BlockchainConfig::Esplora { config: var_config };
            }
            2 => {
                let mut var_config = <crate::api::blockchain::RpcConfig>::sse_decode(deserializer);
                return crate::api::blockchain::BlockchainConfig::Rpc { config: var_config };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::types::ChangeSpendPolicy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::types::ChangeSpendPolicy::ChangeAllowed,
            1 => crate::api::types::ChangeSpendPolicy::OnlyChange,
            2 => crate::api::types::ChangeSpendPolicy::ChangeForbidden,
            _ => unreachable!("Invalid variant for ChangeSpendPolicy: {}", inner),
        };
    }
}

impl SseDecode for crate::api::types::Condition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_csv = <Option<u32>>::sse_decode(deserializer);
        let mut var_timelock = <Option<crate::api::types::LockTime>>::sse_decode(deserializer);
        return crate::api::types::Condition {
            csv: var_csv,
            timelock: var_timelock,
        };
    }
}

impl SseDecode for crate::api::error::ConsensusError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::ConsensusError::Io(var_field0);
            }
            1 => {
                let mut var_requested = <usize>::sse_decode(deserializer);
                let mut var_max = <usize>::sse_decode(deserializer);
                return crate::api::error::ConsensusError::OversizedVectorAllocation {
                    requested: var_requested,
                    max: var_max,
                };
            }
            2 => {
                let mut var_expected = <[u8; 4]>::sse_decode(deserializer);
                let mut var_actual = <[u8; 4]>::sse_decode(deserializer);
                return crate::api::error::ConsensusError::InvalidChecksum {
                    expected: var_expected,
                    actual: var_actual,
                };
            }
            3 => {
                return crate::api::error::ConsensusError::NonMinimalVarInt;
            }
            4 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::ConsensusError::ParseFailed(var_field0);
            }
            5 => {
                let mut var_field0 = <u8>::sse_decode(deserializer);
                return crate::api::error::ConsensusError::UnsupportedSegwitFlag(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::types::DatabaseConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::types::DatabaseConfig::Memory;
            }
            1 => {
                let mut var_config =
                    <crate::api::types::SqliteDbConfiguration>::sse_decode(deserializer);
                return crate::api::types::DatabaseConfig::Sqlite { config: var_config };
            }
            2 => {
                let mut var_config =
                    <crate::api::types::SledDbConfiguration>::sse_decode(deserializer);
                return crate::api::types::DatabaseConfig::Sled { config: var_config };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::error::DescriptorError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::error::DescriptorError::InvalidHdKeyPath;
            }
            1 => {
                return crate::api::error::DescriptorError::InvalidDescriptorChecksum;
            }
            2 => {
                return crate::api::error::DescriptorError::HardenedDerivationXpub;
            }
            3 => {
                return crate::api::error::DescriptorError::MultiPath;
            }
            4 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::DescriptorError::Key(var_field0);
            }
            5 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::DescriptorError::Policy(var_field0);
            }
            6 => {
                let mut var_field0 = <u8>::sse_decode(deserializer);
                return crate::api::error::DescriptorError::InvalidDescriptorCharacter(var_field0);
            }
            7 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::DescriptorError::Bip32(var_field0);
            }
            8 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::DescriptorError::Base58(var_field0);
            }
            9 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::DescriptorError::Pk(var_field0);
            }
            10 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::DescriptorError::Miniscript(var_field0);
            }
            11 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::DescriptorError::Hex(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::blockchain::ElectrumConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_socks5 = <Option<String>>::sse_decode(deserializer);
        let mut var_retry = <u8>::sse_decode(deserializer);
        let mut var_timeout = <Option<u8>>::sse_decode(deserializer);
        let mut var_stopGap = <u64>::sse_decode(deserializer);
        let mut var_validateDomain = <bool>::sse_decode(deserializer);
        return crate::api::blockchain::ElectrumConfig {
            url: var_url,
            socks5: var_socks5,
            retry: var_retry,
            timeout: var_timeout,
            stop_gap: var_stopGap,
            validate_domain: var_validateDomain,
        };
    }
}

impl SseDecode for crate::api::blockchain::EsploraConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_baseUrl = <String>::sse_decode(deserializer);
        let mut var_proxy = <Option<String>>::sse_decode(deserializer);
        let mut var_concurrency = <Option<u8>>::sse_decode(deserializer);
        let mut var_stopGap = <u64>::sse_decode(deserializer);
        let mut var_timeout = <Option<u64>>::sse_decode(deserializer);
        return crate::api::blockchain::EsploraConfig {
            base_url: var_baseUrl,
            proxy: var_proxy,
            concurrency: var_concurrency,
            stop_gap: var_stopGap,
            timeout: var_timeout,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::types::FeeRate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_satPerVb = <f32>::sse_decode(deserializer);
        return crate::api::types::FeeRate {
            sat_per_vb: var_satPerVb,
        };
    }
}

impl SseDecode for crate::api::error::HexError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <u8>::sse_decode(deserializer);
                return crate::api::error::HexError::InvalidChar(var_field0);
            }
            1 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                return crate::api::error::HexError::OddLengthString(var_field0);
            }
            2 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                let mut var_field1 = <usize>::sse_decode(deserializer);
                return crate::api::error::HexError::InvalidLength(var_field0, var_field1);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::types::Input {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_s = <String>::sse_decode(deserializer);
        return crate::api::types::Input { s: var_s };
    }
}

impl SseDecode for crate::api::types::KeychainKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::types::KeychainKind::ExternalChain,
            1 => crate::api::types::KeychainKind::InternalChain,
            _ => unreachable!("Invalid variant for KeychainKind: {}", inner),
        };
    }
}

impl SseDecode for Vec<crate::api::types::BdkPolicy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::BdkPolicy>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::BdkTransactionDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::BdkTransactionDetails>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::BdkTxIn> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::BdkTxIn>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::BdkTxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::BdkTxOut>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::Condition> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::Condition>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Vec<u8>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::LocalUtxo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::LocalUtxo>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::OutPoint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::OutPoint>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::PkOrF> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::PkOrF>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(Vec<u32>, Vec<crate::api::types::Condition>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(Vec<u32>, Vec<crate::api::types::Condition>)>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, Vec<u32>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, Vec<u32>)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(u32, Vec<crate::api::types::Condition>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(u32, Vec<crate::api::types::Condition>)>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::types::ScriptAmount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::types::ScriptAmount>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::types::LocalUtxo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_outpoint = <crate::api::types::OutPoint>::sse_decode(deserializer);
        let mut var_txout = <crate::api::types::BdkTxOut>::sse_decode(deserializer);
        let mut var_keychain = <crate::api::types::KeychainKind>::sse_decode(deserializer);
        let mut var_isSpent = <bool>::sse_decode(deserializer);
        return crate::api::types::LocalUtxo {
            outpoint: var_outpoint,
            txout: var_txout,
            keychain: var_keychain,
            is_spent: var_isSpent,
        };
    }
}

impl SseDecode for crate::api::types::LockTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::types::LockTime::Blocks(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::types::LockTime::Seconds(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::types::Network::Testnet,
            1 => crate::api::types::Network::Regtest,
            2 => crate::api::types::Network::Bitcoin,
            3 => crate::api::types::Network::Signet,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for Option<std::collections::HashMap<String, Vec<u32>>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<std::collections::HashMap<String, Vec<u32>>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::BdkAddress> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::BdkAddress>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::descriptor::BdkDescriptor> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::descriptor::BdkDescriptor>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::BdkPolicy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::BdkPolicy>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::BdkScriptBuf> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::BdkScriptBuf>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::BdkTransaction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::BdkTransaction>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::BlockTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::BlockTime>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::FeeRate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::FeeRate>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::LockTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::LockTime>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::PsbtSigHashType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::PsbtSigHashType>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::RbfValue> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::RbfValue>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<(crate::api::types::OutPoint, crate::api::types::Input, usize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<(
                crate::api::types::OutPoint,
                crate::api::types::Input,
                usize,
            )>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::blockchain::RpcSyncParams> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::blockchain::RpcSyncParams>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::types::SignOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::types::SignOptions>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::types::OutPoint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txid = <String>::sse_decode(deserializer);
        let mut var_vout = <u32>::sse_decode(deserializer);
        return crate::api::types::OutPoint {
            txid: var_txid,
            vout: var_vout,
        };
    }
}

impl SseDecode for crate::api::types::Payload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_pubkeyHash = <String>::sse_decode(deserializer);
                return crate::api::types::Payload::PubkeyHash {
                    pubkey_hash: var_pubkeyHash,
                };
            }
            1 => {
                let mut var_scriptHash = <String>::sse_decode(deserializer);
                return crate::api::types::Payload::ScriptHash {
                    script_hash: var_scriptHash,
                };
            }
            2 => {
                let mut var_version = <crate::api::types::WitnessVersion>::sse_decode(deserializer);
                let mut var_program = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::types::Payload::WitnessProgram {
                    version: var_version,
                    program: var_program,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::types::PkOrF {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_value = <String>::sse_decode(deserializer);
                return crate::api::types::PkOrF::Pubkey { value: var_value };
            }
            1 => {
                let mut var_value = <String>::sse_decode(deserializer);
                return crate::api::types::PkOrF::XOnlyPubkey { value: var_value };
            }
            2 => {
                let mut var_value = <String>::sse_decode(deserializer);
                return crate::api::types::PkOrF::Fingerprint { value: var_value };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::types::PsbtSigHashType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inner = <u32>::sse_decode(deserializer);
        return crate::api::types::PsbtSigHashType { inner: var_inner };
    }
}

impl SseDecode for crate::api::types::RbfValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::types::RbfValue::RbfDefault;
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::types::RbfValue::Value(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for (crate::api::types::BdkAddress, u32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::api::types::BdkAddress>::sse_decode(deserializer);
        let mut var_field1 = <u32>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        crate::api::psbt::BdkPsbt,
        crate::api::types::BdkTransactionDetails,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::api::psbt::BdkPsbt>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::types::BdkTransactionDetails>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (Vec<u32>, Vec<crate::api::types::Condition>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Vec<u32>>::sse_decode(deserializer);
        let mut var_field1 = <Vec<crate::api::types::Condition>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (crate::api::types::OutPoint, crate::api::types::Input, usize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::api::types::OutPoint>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::types::Input>::sse_decode(deserializer);
        let mut var_field2 = <usize>::sse_decode(deserializer);
        return (var_field0, var_field1, var_field2);
    }
}

impl SseDecode for (String, Vec<u32>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <Vec<u32>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (u32, Vec<crate::api::types::Condition>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <u32>::sse_decode(deserializer);
        let mut var_field1 = <Vec<crate::api::types::Condition>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::blockchain::RpcConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_auth = <crate::api::blockchain::Auth>::sse_decode(deserializer);
        let mut var_network = <crate::api::types::Network>::sse_decode(deserializer);
        let mut var_walletName = <String>::sse_decode(deserializer);
        let mut var_syncParams =
            <Option<crate::api::blockchain::RpcSyncParams>>::sse_decode(deserializer);
        return crate::api::blockchain::RpcConfig {
            url: var_url,
            auth: var_auth,
            network: var_network,
            wallet_name: var_walletName,
            sync_params: var_syncParams,
        };
    }
}

impl SseDecode for crate::api::blockchain::RpcSyncParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_startScriptCount = <u64>::sse_decode(deserializer);
        let mut var_startTime = <u64>::sse_decode(deserializer);
        let mut var_forceStartTime = <bool>::sse_decode(deserializer);
        let mut var_pollRateSec = <u64>::sse_decode(deserializer);
        return crate::api::blockchain::RpcSyncParams {
            start_script_count: var_startScriptCount,
            start_time: var_startTime,
            force_start_time: var_forceStartTime,
            poll_rate_sec: var_pollRateSec,
        };
    }
}

impl SseDecode for crate::api::types::Satisfaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_n = <u64>::sse_decode(deserializer);
                let mut var_m = <u64>::sse_decode(deserializer);
                let mut var_items = <Vec<u64>>::sse_decode(deserializer);
                let mut var_sorted = <Option<bool>>::sse_decode(deserializer);
                let mut var_conditions = <std::collections::HashMap<
                    u32,
                    Vec<crate::api::types::Condition>,
                >>::sse_decode(deserializer);
                return crate::api::types::Satisfaction::Partial {
                    n: var_n,
                    m: var_m,
                    items: var_items,
                    sorted: var_sorted,
                    conditions: var_conditions,
                };
            }
            1 => {
                let mut var_n = <u64>::sse_decode(deserializer);
                let mut var_m = <u64>::sse_decode(deserializer);
                let mut var_items = <Vec<u64>>::sse_decode(deserializer);
                let mut var_sorted = <Option<bool>>::sse_decode(deserializer);
                let mut var_conditions = <std::collections::HashMap<
                    Vec<u32>,
                    Vec<crate::api::types::Condition>,
                >>::sse_decode(deserializer);
                return crate::api::types::Satisfaction::PartialComplete {
                    n: var_n,
                    m: var_m,
                    items: var_items,
                    sorted: var_sorted,
                    conditions: var_conditions,
                };
            }
            2 => {
                let mut var_condition = <crate::api::types::Condition>::sse_decode(deserializer);
                return crate::api::types::Satisfaction::Complete {
                    condition: var_condition,
                };
            }
            3 => {
                let mut var_msg = <String>::sse_decode(deserializer);
                return crate::api::types::Satisfaction::None { msg: var_msg };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::types::SatisfiableItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_key = <crate::api::types::PkOrF>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::EcdsaSignature { key: var_key };
            }
            1 => {
                let mut var_key = <crate::api::types::PkOrF>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::SchnorrSignature { key: var_key };
            }
            2 => {
                let mut var_hash = <String>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::Sha256Preimage { hash: var_hash };
            }
            3 => {
                let mut var_hash = <String>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::Hash256Preimage { hash: var_hash };
            }
            4 => {
                let mut var_hash = <String>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::Ripemd160Preimage { hash: var_hash };
            }
            5 => {
                let mut var_hash = <String>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::Hash160Preimage { hash: var_hash };
            }
            6 => {
                let mut var_value = <crate::api::types::LockTime>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::AbsoluteTimelock { value: var_value };
            }
            7 => {
                let mut var_value = <u32>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::RelativeTimelock { value: var_value };
            }
            8 => {
                let mut var_keys = <Vec<crate::api::types::PkOrF>>::sse_decode(deserializer);
                let mut var_threshold = <u64>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::Multisig {
                    keys: var_keys,
                    threshold: var_threshold,
                };
            }
            9 => {
                let mut var_items = <Vec<crate::api::types::BdkPolicy>>::sse_decode(deserializer);
                let mut var_threshold = <u64>::sse_decode(deserializer);
                return crate::api::types::SatisfiableItem::Thresh {
                    items: var_items,
                    threshold: var_threshold,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::types::ScriptAmount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_script = <crate::api::types::BdkScriptBuf>::sse_decode(deserializer);
        let mut var_amount = <u64>::sse_decode(deserializer);
        return crate::api::types::ScriptAmount {
            script: var_script,
            amount: var_amount,
        };
    }
}

impl SseDecode for crate::api::types::SignOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_trustWitnessUtxo = <bool>::sse_decode(deserializer);
        let mut var_assumeHeight = <Option<u32>>::sse_decode(deserializer);
        let mut var_allowAllSighashes = <bool>::sse_decode(deserializer);
        let mut var_removePartialSigs = <bool>::sse_decode(deserializer);
        let mut var_tryFinalize = <bool>::sse_decode(deserializer);
        let mut var_signWithTapInternalKey = <bool>::sse_decode(deserializer);
        let mut var_allowGrinding = <bool>::sse_decode(deserializer);
        return crate::api::types::SignOptions {
            trust_witness_utxo: var_trustWitnessUtxo,
            assume_height: var_assumeHeight,
            allow_all_sighashes: var_allowAllSighashes,
            remove_partial_sigs: var_removePartialSigs,
            try_finalize: var_tryFinalize,
            sign_with_tap_internal_key: var_signWithTapInternalKey,
            allow_grinding: var_allowGrinding,
        };
    }
}

impl SseDecode for crate::api::types::SledDbConfiguration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_treeName = <String>::sse_decode(deserializer);
        return crate::api::types::SledDbConfiguration {
            path: var_path,
            tree_name: var_treeName,
        };
    }
}

impl SseDecode for crate::api::types::SqliteDbConfiguration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_path = <String>::sse_decode(deserializer);
        return crate::api::types::SqliteDbConfiguration { path: var_path };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for [u8; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::types::Variant {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::types::Variant::Bech32,
            1 => crate::api::types::Variant::Bech32m,
            _ => unreachable!("Invalid variant for Variant: {}", inner),
        };
    }
}

impl SseDecode for crate::api::types::WitnessVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::types::WitnessVersion::V0,
            1 => crate::api::types::WitnessVersion::V1,
            2 => crate::api::types::WitnessVersion::V2,
            3 => crate::api::types::WitnessVersion::V3,
            4 => crate::api::types::WitnessVersion::V4,
            5 => crate::api::types::WitnessVersion::V5,
            6 => crate::api::types::WitnessVersion::V6,
            7 => crate::api::types::WitnessVersion::V7,
            8 => crate::api::types::WitnessVersion::V8,
            9 => crate::api::types::WitnessVersion::V9,
            10 => crate::api::types::WitnessVersion::V10,
            11 => crate::api::types::WitnessVersion::V11,
            12 => crate::api::types::WitnessVersion::V12,
            13 => crate::api::types::WitnessVersion::V13,
            14 => crate::api::types::WitnessVersion::V14,
            15 => crate::api::types::WitnessVersion::V15,
            16 => crate::api::types::WitnessVersion::V16,
            _ => unreachable!("Invalid variant for WitnessVersion: {}", inner),
        };
    }
}

impl SseDecode for crate::api::types::WordCount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::types::WordCount::Words12,
            1 => crate::api::types::WordCount::Words18,
            2 => crate::api::types::WordCount::Words24,
            _ => unreachable!("Invalid variant for WordCount: {}", inner),
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::AddressError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::error::AddressError::Base58(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::AddressError::Bech32(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::AddressError::EmptyBech32Payload => [2.into_dart()].into_dart(),
            crate::api::error::AddressError::InvalidBech32Variant { expected, found } => [
                3.into_dart(),
                expected.into_into_dart().into_dart(),
                found.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::error::AddressError::InvalidWitnessVersion(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::AddressError::UnparsableWitnessVersion(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::AddressError::MalformedWitnessVersion => [6.into_dart()].into_dart(),
            crate::api::error::AddressError::InvalidWitnessProgramLength(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::AddressError::InvalidSegwitV0ProgramLength(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::AddressError::UncompressedPubkey => [9.into_dart()].into_dart(),
            crate::api::error::AddressError::ExcessiveScriptSize => [10.into_dart()].into_dart(),
            crate::api::error::AddressError::UnrecognizedScript => [11.into_dart()].into_dart(),
            crate::api::error::AddressError::UnknownAddressType(field0) => {
                [12.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::AddressError::NetworkValidation {
                network_required,
                network_found,
                address,
            } => [
                13.into_dart(),
                network_required.into_into_dart().into_dart(),
                network_found.into_into_dart().into_dart(),
                address.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::error::AddressError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::AddressError>
    for crate::api::error::AddressError
{
    fn into_into_dart(self) -> crate::api::error::AddressError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::AddressIndex {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::types::AddressIndex::Increase => [0.into_dart()].into_dart(),
            crate::api::types::AddressIndex::LastUnused => [1.into_dart()].into_dart(),
            crate::api::types::AddressIndex::Peek { index } => {
                [2.into_dart(), index.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::AddressIndex::Reset { index } => {
                [3.into_dart(), index.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::AddressIndex
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::AddressIndex>
    for crate::api::types::AddressIndex
{
    fn into_into_dart(self) -> crate::api::types::AddressIndex {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blockchain::Auth {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::blockchain::Auth::None => [0.into_dart()].into_dart(),
            crate::api::blockchain::Auth::UserPass { username, password } => [
                1.into_dart(),
                username.into_into_dart().into_dart(),
                password.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::blockchain::Auth::Cookie { file } => {
                [2.into_dart(), file.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::blockchain::Auth {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blockchain::Auth>
    for crate::api::blockchain::Auth
{
    fn into_into_dart(self) -> crate::api::blockchain::Auth {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::Balance {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.immature.into_into_dart().into_dart(),
            self.trusted_pending.into_into_dart().into_dart(),
            self.untrusted_pending.into_into_dart().into_dart(),
            self.confirmed.into_into_dart().into_dart(),
            self.spendable.into_into_dart().into_dart(),
            self.total.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::Balance {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::Balance> for crate::api::types::Balance {
    fn into_into_dart(self) -> crate::api::types::Balance {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::BdkAddress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.ptr.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::BdkAddress {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::BdkAddress>
    for crate::api::types::BdkAddress
{
    fn into_into_dart(self) -> crate::api::types::BdkAddress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blockchain::BdkBlockchain {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.ptr.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blockchain::BdkBlockchain
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blockchain::BdkBlockchain>
    for crate::api::blockchain::BdkBlockchain
{
    fn into_into_dart(self) -> crate::api::blockchain::BdkBlockchain {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::key::BdkDerivationPath {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.ptr.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::key::BdkDerivationPath
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::key::BdkDerivationPath>
    for crate::api::key::BdkDerivationPath
{
    fn into_into_dart(self) -> crate::api::key::BdkDerivationPath {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::descriptor::BdkDescriptor {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.extended_descriptor.into_into_dart().into_dart(),
            self.key_map.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::descriptor::BdkDescriptor
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::descriptor::BdkDescriptor>
    for crate::api::descriptor::BdkDescriptor
{
    fn into_into_dart(self) -> crate::api::descriptor::BdkDescriptor {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::key::BdkDescriptorPublicKey {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.ptr.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::key::BdkDescriptorPublicKey
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::key::BdkDescriptorPublicKey>
    for crate::api::key::BdkDescriptorPublicKey
{
    fn into_into_dart(self) -> crate::api::key::BdkDescriptorPublicKey {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::key::BdkDescriptorSecretKey {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.ptr.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::key::BdkDescriptorSecretKey
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::key::BdkDescriptorSecretKey>
    for crate::api::key::BdkDescriptorSecretKey
{
    fn into_into_dart(self) -> crate::api::key::BdkDescriptorSecretKey {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::BdkError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::error::BdkError::Hex(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Consensus(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::VerifyTransaction(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Address(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Descriptor(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::InvalidU32Bytes(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Generic(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::ScriptDoesntHaveAddressForm => [7.into_dart()].into_dart(),
            crate::api::error::BdkError::NoRecipients => [8.into_dart()].into_dart(),
            crate::api::error::BdkError::NoUtxosSelected => [9.into_dart()].into_dart(),
            crate::api::error::BdkError::OutputBelowDustLimit(field0) => {
                [10.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::InsufficientFunds { needed, available } => [
                11.into_dart(),
                needed.into_into_dart().into_dart(),
                available.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::error::BdkError::BnBTotalTriesExceeded => [12.into_dart()].into_dart(),
            crate::api::error::BdkError::BnBNoExactMatch => [13.into_dart()].into_dart(),
            crate::api::error::BdkError::UnknownUtxo => [14.into_dart()].into_dart(),
            crate::api::error::BdkError::TransactionNotFound => [15.into_dart()].into_dart(),
            crate::api::error::BdkError::TransactionConfirmed => [16.into_dart()].into_dart(),
            crate::api::error::BdkError::IrreplaceableTransaction => [17.into_dart()].into_dart(),
            crate::api::error::BdkError::FeeRateTooLow { needed } => {
                [18.into_dart(), needed.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::FeeTooLow { needed } => {
                [19.into_dart(), needed.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::FeeRateUnavailable => [20.into_dart()].into_dart(),
            crate::api::error::BdkError::MissingKeyOrigin(field0) => {
                [21.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Key(field0) => {
                [22.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::ChecksumMismatch => [23.into_dart()].into_dart(),
            crate::api::error::BdkError::SpendingPolicyRequired(field0) => {
                [24.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::InvalidPolicyPathError(field0) => {
                [25.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Signer(field0) => {
                [26.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::InvalidNetwork { requested, found } => [
                27.into_dart(),
                requested.into_into_dart().into_dart(),
                found.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::error::BdkError::InvalidOutpoint(field0) => {
                [28.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Encode(field0) => {
                [29.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Miniscript(field0) => {
                [30.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::MiniscriptPsbt(field0) => {
                [31.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Bip32(field0) => {
                [32.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Bip39(field0) => {
                [33.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Secp256k1(field0) => {
                [34.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Json(field0) => {
                [35.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Psbt(field0) => {
                [36.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::PsbtParse(field0) => {
                [37.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::MissingCachedScripts(field0, field1) => [
                38.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::error::BdkError::Electrum(field0) => {
                [39.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Esplora(field0) => {
                [40.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Sled(field0) => {
                [41.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Rpc(field0) => {
                [42.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::Rusqlite(field0) => {
                [43.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::InvalidInput(field0) => {
                [44.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::InvalidLockTime(field0) => {
                [45.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::BdkError::InvalidTransaction(field0) => {
                [46.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::error::BdkError {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::BdkError>
    for crate::api::error::BdkError
{
    fn into_into_dart(self) -> crate::api::error::BdkError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::key::BdkMnemonic {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.ptr.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::key::BdkMnemonic {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::key::BdkMnemonic>
    for crate::api::key::BdkMnemonic
{
    fn into_into_dart(self) -> crate::api::key::BdkMnemonic {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::BdkPolicy {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.ptr.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::BdkPolicy {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::BdkPolicy>
    for crate::api::types::BdkPolicy
{
    fn into_into_dart(self) -> crate::api::types::BdkPolicy {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::psbt::BdkPsbt {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.ptr.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::psbt::BdkPsbt {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::psbt::BdkPsbt> for crate::api::psbt::BdkPsbt {
    fn into_into_dart(self) -> crate::api::psbt::BdkPsbt {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::BdkScriptBuf {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.bytes.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::BdkScriptBuf
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::BdkScriptBuf>
    for crate::api::types::BdkScriptBuf
{
    fn into_into_dart(self) -> crate::api::types::BdkScriptBuf {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::BdkTransaction {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.s.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::BdkTransaction
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::BdkTransaction>
    for crate::api::types::BdkTransaction
{
    fn into_into_dart(self) -> crate::api::types::BdkTransaction {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::BdkTransactionDetails {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.transaction.into_into_dart().into_dart(),
            self.txid.into_into_dart().into_dart(),
            self.received.into_into_dart().into_dart(),
            self.sent.into_into_dart().into_dart(),
            self.fee.into_into_dart().into_dart(),
            self.confirmation_time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::BdkTransactionDetails
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::BdkTransactionDetails>
    for crate::api::types::BdkTransactionDetails
{
    fn into_into_dart(self) -> crate::api::types::BdkTransactionDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::BdkTxIn {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.previous_output.into_into_dart().into_dart(),
            self.script_sig.into_into_dart().into_dart(),
            self.sequence.into_into_dart().into_dart(),
            self.witness.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::BdkTxIn {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::BdkTxIn> for crate::api::types::BdkTxIn {
    fn into_into_dart(self) -> crate::api::types::BdkTxIn {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::BdkTxOut {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value.into_into_dart().into_dart(),
            self.script_pubkey.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::BdkTxOut {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::BdkTxOut>
    for crate::api::types::BdkTxOut
{
    fn into_into_dart(self) -> crate::api::types::BdkTxOut {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::wallet::BdkWallet {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.ptr.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::wallet::BdkWallet {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::wallet::BdkWallet>
    for crate::api::wallet::BdkWallet
{
    fn into_into_dart(self) -> crate::api::wallet::BdkWallet {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::BlockTime {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.height.into_into_dart().into_dart(),
            self.timestamp.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::BlockTime {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::BlockTime>
    for crate::api::types::BlockTime
{
    fn into_into_dart(self) -> crate::api::types::BlockTime {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blockchain::BlockchainConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::blockchain::BlockchainConfig::Electrum { config } => {
                [0.into_dart(), config.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blockchain::BlockchainConfig::Esplora { config } => {
                [1.into_dart(), config.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blockchain::BlockchainConfig::Rpc { config } => {
                [2.into_dart(), config.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blockchain::BlockchainConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blockchain::BlockchainConfig>
    for crate::api::blockchain::BlockchainConfig
{
    fn into_into_dart(self) -> crate::api::blockchain::BlockchainConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::ChangeSpendPolicy {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::ChangeAllowed => 0.into_dart(),
            Self::OnlyChange => 1.into_dart(),
            Self::ChangeForbidden => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::ChangeSpendPolicy
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::ChangeSpendPolicy>
    for crate::api::types::ChangeSpendPolicy
{
    fn into_into_dart(self) -> crate::api::types::ChangeSpendPolicy {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::Condition {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.csv.into_into_dart().into_dart(),
            self.timelock.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::Condition {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::Condition>
    for crate::api::types::Condition
{
    fn into_into_dart(self) -> crate::api::types::Condition {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::ConsensusError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::error::ConsensusError::Io(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::ConsensusError::OversizedVectorAllocation { requested, max } => [
                1.into_dart(),
                requested.into_into_dart().into_dart(),
                max.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::error::ConsensusError::InvalidChecksum { expected, actual } => [
                2.into_dart(),
                expected.into_into_dart().into_dart(),
                actual.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::error::ConsensusError::NonMinimalVarInt => [3.into_dart()].into_dart(),
            crate::api::error::ConsensusError::ParseFailed(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::ConsensusError::UnsupportedSegwitFlag(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::error::ConsensusError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::ConsensusError>
    for crate::api::error::ConsensusError
{
    fn into_into_dart(self) -> crate::api::error::ConsensusError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::DatabaseConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::types::DatabaseConfig::Memory => [0.into_dart()].into_dart(),
            crate::api::types::DatabaseConfig::Sqlite { config } => {
                [1.into_dart(), config.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::DatabaseConfig::Sled { config } => {
                [2.into_dart(), config.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::DatabaseConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::DatabaseConfig>
    for crate::api::types::DatabaseConfig
{
    fn into_into_dart(self) -> crate::api::types::DatabaseConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::DescriptorError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::error::DescriptorError::InvalidHdKeyPath => [0.into_dart()].into_dart(),
            crate::api::error::DescriptorError::InvalidDescriptorChecksum => {
                [1.into_dart()].into_dart()
            }
            crate::api::error::DescriptorError::HardenedDerivationXpub => {
                [2.into_dart()].into_dart()
            }
            crate::api::error::DescriptorError::MultiPath => [3.into_dart()].into_dart(),
            crate::api::error::DescriptorError::Key(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::DescriptorError::Policy(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::DescriptorError::InvalidDescriptorCharacter(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::DescriptorError::Bip32(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::DescriptorError::Base58(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::DescriptorError::Pk(field0) => {
                [9.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::DescriptorError::Miniscript(field0) => {
                [10.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::DescriptorError::Hex(field0) => {
                [11.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::error::DescriptorError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::DescriptorError>
    for crate::api::error::DescriptorError
{
    fn into_into_dart(self) -> crate::api::error::DescriptorError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blockchain::ElectrumConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.socks5.into_into_dart().into_dart(),
            self.retry.into_into_dart().into_dart(),
            self.timeout.into_into_dart().into_dart(),
            self.stop_gap.into_into_dart().into_dart(),
            self.validate_domain.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blockchain::ElectrumConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blockchain::ElectrumConfig>
    for crate::api::blockchain::ElectrumConfig
{
    fn into_into_dart(self) -> crate::api::blockchain::ElectrumConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blockchain::EsploraConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.base_url.into_into_dart().into_dart(),
            self.proxy.into_into_dart().into_dart(),
            self.concurrency.into_into_dart().into_dart(),
            self.stop_gap.into_into_dart().into_dart(),
            self.timeout.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blockchain::EsploraConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blockchain::EsploraConfig>
    for crate::api::blockchain::EsploraConfig
{
    fn into_into_dart(self) -> crate::api::blockchain::EsploraConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::FeeRate {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.sat_per_vb.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::FeeRate {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::FeeRate> for crate::api::types::FeeRate {
    fn into_into_dart(self) -> crate::api::types::FeeRate {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::HexError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::error::HexError::InvalidChar(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::HexError::OddLengthString(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::HexError::InvalidLength(field0, field1) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::error::HexError {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::HexError>
    for crate::api::error::HexError
{
    fn into_into_dart(self) -> crate::api::error::HexError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::Input {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.s.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::Input {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::Input> for crate::api::types::Input {
    fn into_into_dart(self) -> crate::api::types::Input {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::KeychainKind {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::ExternalChain => 0.into_dart(),
            Self::InternalChain => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::KeychainKind
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::KeychainKind>
    for crate::api::types::KeychainKind
{
    fn into_into_dart(self) -> crate::api::types::KeychainKind {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::LocalUtxo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.outpoint.into_into_dart().into_dart(),
            self.txout.into_into_dart().into_dart(),
            self.keychain.into_into_dart().into_dart(),
            self.is_spent.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::LocalUtxo {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::LocalUtxo>
    for crate::api::types::LocalUtxo
{
    fn into_into_dart(self) -> crate::api::types::LocalUtxo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::LockTime {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::types::LockTime::Blocks(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::LockTime::Seconds(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::LockTime {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::LockTime>
    for crate::api::types::LockTime
{
    fn into_into_dart(self) -> crate::api::types::LockTime {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::Network {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Testnet => 0.into_dart(),
            Self::Regtest => 1.into_dart(),
            Self::Bitcoin => 2.into_dart(),
            Self::Signet => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::Network {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::Network> for crate::api::types::Network {
    fn into_into_dart(self) -> crate::api::types::Network {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::OutPoint {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.txid.into_into_dart().into_dart(),
            self.vout.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::OutPoint {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::OutPoint>
    for crate::api::types::OutPoint
{
    fn into_into_dart(self) -> crate::api::types::OutPoint {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::Payload {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::types::Payload::PubkeyHash { pubkey_hash } => {
                [0.into_dart(), pubkey_hash.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::Payload::ScriptHash { script_hash } => {
                [1.into_dart(), script_hash.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::Payload::WitnessProgram { version, program } => [
                2.into_dart(),
                version.into_into_dart().into_dart(),
                program.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::Payload {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::Payload> for crate::api::types::Payload {
    fn into_into_dart(self) -> crate::api::types::Payload {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::PkOrF {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::types::PkOrF::Pubkey { value } => {
                [0.into_dart(), value.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::PkOrF::XOnlyPubkey { value } => {
                [1.into_dart(), value.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::PkOrF::Fingerprint { value } => {
                [2.into_dart(), value.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::PkOrF {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::PkOrF> for crate::api::types::PkOrF {
    fn into_into_dart(self) -> crate::api::types::PkOrF {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::PsbtSigHashType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::PsbtSigHashType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::PsbtSigHashType>
    for crate::api::types::PsbtSigHashType
{
    fn into_into_dart(self) -> crate::api::types::PsbtSigHashType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::RbfValue {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::types::RbfValue::RbfDefault => [0.into_dart()].into_dart(),
            crate::api::types::RbfValue::Value(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::RbfValue {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::RbfValue>
    for crate::api::types::RbfValue
{
    fn into_into_dart(self) -> crate::api::types::RbfValue {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blockchain::RpcConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.auth.into_into_dart().into_dart(),
            self.network.into_into_dart().into_dart(),
            self.wallet_name.into_into_dart().into_dart(),
            self.sync_params.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blockchain::RpcConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blockchain::RpcConfig>
    for crate::api::blockchain::RpcConfig
{
    fn into_into_dart(self) -> crate::api::blockchain::RpcConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blockchain::RpcSyncParams {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.start_script_count.into_into_dart().into_dart(),
            self.start_time.into_into_dart().into_dart(),
            self.force_start_time.into_into_dart().into_dart(),
            self.poll_rate_sec.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blockchain::RpcSyncParams
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blockchain::RpcSyncParams>
    for crate::api::blockchain::RpcSyncParams
{
    fn into_into_dart(self) -> crate::api::blockchain::RpcSyncParams {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::Satisfaction {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::types::Satisfaction::Partial {
                n,
                m,
                items,
                sorted,
                conditions,
            } => [
                0.into_dart(),
                n.into_into_dart().into_dart(),
                m.into_into_dart().into_dart(),
                items.into_into_dart().into_dart(),
                sorted.into_into_dart().into_dart(),
                conditions.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::types::Satisfaction::PartialComplete {
                n,
                m,
                items,
                sorted,
                conditions,
            } => [
                1.into_dart(),
                n.into_into_dart().into_dart(),
                m.into_into_dart().into_dart(),
                items.into_into_dart().into_dart(),
                sorted.into_into_dart().into_dart(),
                conditions.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::types::Satisfaction::Complete { condition } => {
                [2.into_dart(), condition.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::Satisfaction::None { msg } => {
                [3.into_dart(), msg.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::Satisfaction
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::Satisfaction>
    for crate::api::types::Satisfaction
{
    fn into_into_dart(self) -> crate::api::types::Satisfaction {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::SatisfiableItem {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::types::SatisfiableItem::EcdsaSignature { key } => {
                [0.into_dart(), key.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::SatisfiableItem::SchnorrSignature { key } => {
                [1.into_dart(), key.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::SatisfiableItem::Sha256Preimage { hash } => {
                [2.into_dart(), hash.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::SatisfiableItem::Hash256Preimage { hash } => {
                [3.into_dart(), hash.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::SatisfiableItem::Ripemd160Preimage { hash } => {
                [4.into_dart(), hash.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::SatisfiableItem::Hash160Preimage { hash } => {
                [5.into_dart(), hash.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::SatisfiableItem::AbsoluteTimelock { value } => {
                [6.into_dart(), value.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::SatisfiableItem::RelativeTimelock { value } => {
                [7.into_dart(), value.into_into_dart().into_dart()].into_dart()
            }
            crate::api::types::SatisfiableItem::Multisig { keys, threshold } => [
                8.into_dart(),
                keys.into_into_dart().into_dart(),
                threshold.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::types::SatisfiableItem::Thresh { items, threshold } => [
                9.into_dart(),
                items.into_into_dart().into_dart(),
                threshold.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::SatisfiableItem
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::SatisfiableItem>
    for crate::api::types::SatisfiableItem
{
    fn into_into_dart(self) -> crate::api::types::SatisfiableItem {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::ScriptAmount {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.script.into_into_dart().into_dart(),
            self.amount.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::ScriptAmount
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::ScriptAmount>
    for crate::api::types::ScriptAmount
{
    fn into_into_dart(self) -> crate::api::types::ScriptAmount {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::SignOptions {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.trust_witness_utxo.into_into_dart().into_dart(),
            self.assume_height.into_into_dart().into_dart(),
            self.allow_all_sighashes.into_into_dart().into_dart(),
            self.remove_partial_sigs.into_into_dart().into_dart(),
            self.try_finalize.into_into_dart().into_dart(),
            self.sign_with_tap_internal_key.into_into_dart().into_dart(),
            self.allow_grinding.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::SignOptions
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::SignOptions>
    for crate::api::types::SignOptions
{
    fn into_into_dart(self) -> crate::api::types::SignOptions {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::SledDbConfiguration {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.path.into_into_dart().into_dart(),
            self.tree_name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::SledDbConfiguration
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::SledDbConfiguration>
    for crate::api::types::SledDbConfiguration
{
    fn into_into_dart(self) -> crate::api::types::SledDbConfiguration {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::SqliteDbConfiguration {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.path.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::SqliteDbConfiguration
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::SqliteDbConfiguration>
    for crate::api::types::SqliteDbConfiguration
{
    fn into_into_dart(self) -> crate::api::types::SqliteDbConfiguration {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::Variant {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Bech32 => 0.into_dart(),
            Self::Bech32m => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::Variant {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::Variant> for crate::api::types::Variant {
    fn into_into_dart(self) -> crate::api::types::Variant {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::WitnessVersion {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::V0 => 0.into_dart(),
            Self::V1 => 1.into_dart(),
            Self::V2 => 2.into_dart(),
            Self::V3 => 3.into_dart(),
            Self::V4 => 4.into_dart(),
            Self::V5 => 5.into_dart(),
            Self::V6 => 6.into_dart(),
            Self::V7 => 7.into_dart(),
            Self::V8 => 8.into_dart(),
            Self::V9 => 9.into_dart(),
            Self::V10 => 10.into_dart(),
            Self::V11 => 11.into_dart(),
            Self::V12 => 12.into_dart(),
            Self::V13 => 13.into_dart(),
            Self::V14 => 14.into_dart(),
            Self::V15 => 15.into_dart(),
            Self::V16 => 16.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::types::WitnessVersion
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::WitnessVersion>
    for crate::api::types::WitnessVersion
{
    fn into_into_dart(self) -> crate::api::types::WitnessVersion {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::types::WordCount {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Words12 => 0.into_dart(),
            Self::Words18 => 1.into_dart(),
            Self::Words24 => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::types::WordCount {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::types::WordCount>
    for crate::api::types::WordCount
{
    fn into_into_dart(self) -> crate::api::types::WordCount {
        self
    }
}

impl SseEncode for std::collections::HashMap<String, Vec<u32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, Vec<u32>)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<Vec<u32>, Vec<crate::api::types::Condition>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(Vec<u32>, Vec<crate::api::types::Condition>)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for std::collections::HashMap<u32, Vec<crate::api::types::Condition>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(u32, Vec<crate::api::types::Condition>)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for RustOpaqueNom<bdk::bitcoin::Address> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<bdk::bitcoin::bip32::DerivationPath> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<bdk::blockchain::AnyBlockchain> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<bdk::descriptor::ExtendedDescriptor> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<bdk::descriptor::Policy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<bdk::keys::DescriptorPublicKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<bdk::keys::DescriptorSecretKey> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<bdk::keys::KeyMap> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<bdk::keys::bip39::Mnemonic> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<std::sync::Mutex<bdk::Wallet<bdk::database::AnyDatabase>>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<std::sync::Mutex<bdk::bitcoin::psbt::PartiallySignedTransaction>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::error::AddressError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::error::AddressError::Base58(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::AddressError::Bech32(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::AddressError::EmptyBech32Payload => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::error::AddressError::InvalidBech32Variant { expected, found } => {
                <i32>::sse_encode(3, serializer);
                <crate::api::types::Variant>::sse_encode(expected, serializer);
                <crate::api::types::Variant>::sse_encode(found, serializer);
            }
            crate::api::error::AddressError::InvalidWitnessVersion(field0) => {
                <i32>::sse_encode(4, serializer);
                <u8>::sse_encode(field0, serializer);
            }
            crate::api::error::AddressError::UnparsableWitnessVersion(field0) => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::AddressError::MalformedWitnessVersion => {
                <i32>::sse_encode(6, serializer);
            }
            crate::api::error::AddressError::InvalidWitnessProgramLength(field0) => {
                <i32>::sse_encode(7, serializer);
                <usize>::sse_encode(field0, serializer);
            }
            crate::api::error::AddressError::InvalidSegwitV0ProgramLength(field0) => {
                <i32>::sse_encode(8, serializer);
                <usize>::sse_encode(field0, serializer);
            }
            crate::api::error::AddressError::UncompressedPubkey => {
                <i32>::sse_encode(9, serializer);
            }
            crate::api::error::AddressError::ExcessiveScriptSize => {
                <i32>::sse_encode(10, serializer);
            }
            crate::api::error::AddressError::UnrecognizedScript => {
                <i32>::sse_encode(11, serializer);
            }
            crate::api::error::AddressError::UnknownAddressType(field0) => {
                <i32>::sse_encode(12, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::AddressError::NetworkValidation {
                network_required,
                network_found,
                address,
            } => {
                <i32>::sse_encode(13, serializer);
                <crate::api::types::Network>::sse_encode(network_required, serializer);
                <crate::api::types::Network>::sse_encode(network_found, serializer);
                <String>::sse_encode(address, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::types::AddressIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::types::AddressIndex::Increase => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::types::AddressIndex::LastUnused => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::types::AddressIndex::Peek { index } => {
                <i32>::sse_encode(2, serializer);
                <u32>::sse_encode(index, serializer);
            }
            crate::api::types::AddressIndex::Reset { index } => {
                <i32>::sse_encode(3, serializer);
                <u32>::sse_encode(index, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::blockchain::Auth {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::blockchain::Auth::None => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::blockchain::Auth::UserPass { username, password } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(username, serializer);
                <String>::sse_encode(password, serializer);
            }
            crate::api::blockchain::Auth::Cookie { file } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(file, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::types::Balance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.immature, serializer);
        <u64>::sse_encode(self.trusted_pending, serializer);
        <u64>::sse_encode(self.untrusted_pending, serializer);
        <u64>::sse_encode(self.confirmed, serializer);
        <u64>::sse_encode(self.spendable, serializer);
        <u64>::sse_encode(self.total, serializer);
    }
}

impl SseEncode for crate::api::types::BdkAddress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bdk::bitcoin::Address>>::sse_encode(self.ptr, serializer);
    }
}

impl SseEncode for crate::api::blockchain::BdkBlockchain {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bdk::blockchain::AnyBlockchain>>::sse_encode(self.ptr, serializer);
    }
}

impl SseEncode for crate::api::key::BdkDerivationPath {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bdk::bitcoin::bip32::DerivationPath>>::sse_encode(self.ptr, serializer);
    }
}

impl SseEncode for crate::api::descriptor::BdkDescriptor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bdk::descriptor::ExtendedDescriptor>>::sse_encode(
            self.extended_descriptor,
            serializer,
        );
        <RustOpaqueNom<bdk::keys::KeyMap>>::sse_encode(self.key_map, serializer);
    }
}

impl SseEncode for crate::api::key::BdkDescriptorPublicKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bdk::keys::DescriptorPublicKey>>::sse_encode(self.ptr, serializer);
    }
}

impl SseEncode for crate::api::key::BdkDescriptorSecretKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bdk::keys::DescriptorSecretKey>>::sse_encode(self.ptr, serializer);
    }
}

impl SseEncode for crate::api::error::BdkError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::error::BdkError::Hex(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::error::HexError>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Consensus(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::error::ConsensusError>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::VerifyTransaction(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Address(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::error::AddressError>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Descriptor(field0) => {
                <i32>::sse_encode(4, serializer);
                <crate::api::error::DescriptorError>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::InvalidU32Bytes(field0) => {
                <i32>::sse_encode(5, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Generic(field0) => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::ScriptDoesntHaveAddressForm => {
                <i32>::sse_encode(7, serializer);
            }
            crate::api::error::BdkError::NoRecipients => {
                <i32>::sse_encode(8, serializer);
            }
            crate::api::error::BdkError::NoUtxosSelected => {
                <i32>::sse_encode(9, serializer);
            }
            crate::api::error::BdkError::OutputBelowDustLimit(field0) => {
                <i32>::sse_encode(10, serializer);
                <usize>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::InsufficientFunds { needed, available } => {
                <i32>::sse_encode(11, serializer);
                <u64>::sse_encode(needed, serializer);
                <u64>::sse_encode(available, serializer);
            }
            crate::api::error::BdkError::BnBTotalTriesExceeded => {
                <i32>::sse_encode(12, serializer);
            }
            crate::api::error::BdkError::BnBNoExactMatch => {
                <i32>::sse_encode(13, serializer);
            }
            crate::api::error::BdkError::UnknownUtxo => {
                <i32>::sse_encode(14, serializer);
            }
            crate::api::error::BdkError::TransactionNotFound => {
                <i32>::sse_encode(15, serializer);
            }
            crate::api::error::BdkError::TransactionConfirmed => {
                <i32>::sse_encode(16, serializer);
            }
            crate::api::error::BdkError::IrreplaceableTransaction => {
                <i32>::sse_encode(17, serializer);
            }
            crate::api::error::BdkError::FeeRateTooLow { needed } => {
                <i32>::sse_encode(18, serializer);
                <f32>::sse_encode(needed, serializer);
            }
            crate::api::error::BdkError::FeeTooLow { needed } => {
                <i32>::sse_encode(19, serializer);
                <u64>::sse_encode(needed, serializer);
            }
            crate::api::error::BdkError::FeeRateUnavailable => {
                <i32>::sse_encode(20, serializer);
            }
            crate::api::error::BdkError::MissingKeyOrigin(field0) => {
                <i32>::sse_encode(21, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Key(field0) => {
                <i32>::sse_encode(22, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::ChecksumMismatch => {
                <i32>::sse_encode(23, serializer);
            }
            crate::api::error::BdkError::SpendingPolicyRequired(field0) => {
                <i32>::sse_encode(24, serializer);
                <crate::api::types::KeychainKind>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::InvalidPolicyPathError(field0) => {
                <i32>::sse_encode(25, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Signer(field0) => {
                <i32>::sse_encode(26, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::InvalidNetwork { requested, found } => {
                <i32>::sse_encode(27, serializer);
                <crate::api::types::Network>::sse_encode(requested, serializer);
                <crate::api::types::Network>::sse_encode(found, serializer);
            }
            crate::api::error::BdkError::InvalidOutpoint(field0) => {
                <i32>::sse_encode(28, serializer);
                <crate::api::types::OutPoint>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Encode(field0) => {
                <i32>::sse_encode(29, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Miniscript(field0) => {
                <i32>::sse_encode(30, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::MiniscriptPsbt(field0) => {
                <i32>::sse_encode(31, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Bip32(field0) => {
                <i32>::sse_encode(32, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Bip39(field0) => {
                <i32>::sse_encode(33, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Secp256k1(field0) => {
                <i32>::sse_encode(34, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Json(field0) => {
                <i32>::sse_encode(35, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Psbt(field0) => {
                <i32>::sse_encode(36, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::PsbtParse(field0) => {
                <i32>::sse_encode(37, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::MissingCachedScripts(field0, field1) => {
                <i32>::sse_encode(38, serializer);
                <usize>::sse_encode(field0, serializer);
                <usize>::sse_encode(field1, serializer);
            }
            crate::api::error::BdkError::Electrum(field0) => {
                <i32>::sse_encode(39, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Esplora(field0) => {
                <i32>::sse_encode(40, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Sled(field0) => {
                <i32>::sse_encode(41, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Rpc(field0) => {
                <i32>::sse_encode(42, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::Rusqlite(field0) => {
                <i32>::sse_encode(43, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::InvalidInput(field0) => {
                <i32>::sse_encode(44, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::InvalidLockTime(field0) => {
                <i32>::sse_encode(45, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::BdkError::InvalidTransaction(field0) => {
                <i32>::sse_encode(46, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::key::BdkMnemonic {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bdk::keys::bip39::Mnemonic>>::sse_encode(self.ptr, serializer);
    }
}

impl SseEncode for crate::api::types::BdkPolicy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bdk::descriptor::Policy>>::sse_encode(self.ptr, serializer);
    }
}

impl SseEncode for crate::api::psbt::BdkPsbt {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<std :: sync :: Mutex < bdk :: bitcoin :: psbt :: PartiallySignedTransaction >>>::sse_encode(self.ptr, serializer);
    }
}

impl SseEncode for crate::api::types::BdkScriptBuf {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.bytes, serializer);
    }
}

impl SseEncode for crate::api::types::BdkTransaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.s, serializer);
    }
}

impl SseEncode for crate::api::types::BdkTransactionDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::api::types::BdkTransaction>>::sse_encode(self.transaction, serializer);
        <String>::sse_encode(self.txid, serializer);
        <u64>::sse_encode(self.received, serializer);
        <u64>::sse_encode(self.sent, serializer);
        <Option<u64>>::sse_encode(self.fee, serializer);
        <Option<crate::api::types::BlockTime>>::sse_encode(self.confirmation_time, serializer);
    }
}

impl SseEncode for crate::api::types::BdkTxIn {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::types::OutPoint>::sse_encode(self.previous_output, serializer);
        <Option<crate::api::types::BdkScriptBuf>>::sse_encode(self.script_sig, serializer);
        <u32>::sse_encode(self.sequence, serializer);
        <Vec<Vec<u8>>>::sse_encode(self.witness, serializer);
    }
}

impl SseEncode for crate::api::types::BdkTxOut {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.value, serializer);
        <crate::api::types::BdkScriptBuf>::sse_encode(self.script_pubkey, serializer);
    }
}

impl SseEncode for crate::api::wallet::BdkWallet {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<std::sync::Mutex<bdk::Wallet<bdk::database::AnyDatabase>>>>::sse_encode(
            self.ptr, serializer,
        );
    }
}

impl SseEncode for crate::api::types::BlockTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.height, serializer);
        <u64>::sse_encode(self.timestamp, serializer);
    }
}

impl SseEncode for crate::api::blockchain::BlockchainConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::blockchain::BlockchainConfig::Electrum { config } => {
                <i32>::sse_encode(0, serializer);
                <crate::api::blockchain::ElectrumConfig>::sse_encode(config, serializer);
            }
            crate::api::blockchain::BlockchainConfig::Esplora { config } => {
                <i32>::sse_encode(1, serializer);
                <crate::api::blockchain::EsploraConfig>::sse_encode(config, serializer);
            }
            crate::api::blockchain::BlockchainConfig::Rpc { config } => {
                <i32>::sse_encode(2, serializer);
                <crate::api::blockchain::RpcConfig>::sse_encode(config, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::types::ChangeSpendPolicy {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::types::ChangeSpendPolicy::ChangeAllowed => 0,
                crate::api::types::ChangeSpendPolicy::OnlyChange => 1,
                crate::api::types::ChangeSpendPolicy::ChangeForbidden => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::types::Condition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u32>>::sse_encode(self.csv, serializer);
        <Option<crate::api::types::LockTime>>::sse_encode(self.timelock, serializer);
    }
}

impl SseEncode for crate::api::error::ConsensusError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::error::ConsensusError::Io(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::ConsensusError::OversizedVectorAllocation { requested, max } => {
                <i32>::sse_encode(1, serializer);
                <usize>::sse_encode(requested, serializer);
                <usize>::sse_encode(max, serializer);
            }
            crate::api::error::ConsensusError::InvalidChecksum { expected, actual } => {
                <i32>::sse_encode(2, serializer);
                <[u8; 4]>::sse_encode(expected, serializer);
                <[u8; 4]>::sse_encode(actual, serializer);
            }
            crate::api::error::ConsensusError::NonMinimalVarInt => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::error::ConsensusError::ParseFailed(field0) => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::ConsensusError::UnsupportedSegwitFlag(field0) => {
                <i32>::sse_encode(5, serializer);
                <u8>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::types::DatabaseConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::types::DatabaseConfig::Memory => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::types::DatabaseConfig::Sqlite { config } => {
                <i32>::sse_encode(1, serializer);
                <crate::api::types::SqliteDbConfiguration>::sse_encode(config, serializer);
            }
            crate::api::types::DatabaseConfig::Sled { config } => {
                <i32>::sse_encode(2, serializer);
                <crate::api::types::SledDbConfiguration>::sse_encode(config, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::error::DescriptorError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::error::DescriptorError::InvalidHdKeyPath => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::error::DescriptorError::InvalidDescriptorChecksum => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::error::DescriptorError::HardenedDerivationXpub => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::error::DescriptorError::MultiPath => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::error::DescriptorError::Key(field0) => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::DescriptorError::Policy(field0) => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::DescriptorError::InvalidDescriptorCharacter(field0) => {
                <i32>::sse_encode(6, serializer);
                <u8>::sse_encode(field0, serializer);
            }
            crate::api::error::DescriptorError::Bip32(field0) => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::DescriptorError::Base58(field0) => {
                <i32>::sse_encode(8, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::DescriptorError::Pk(field0) => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::DescriptorError::Miniscript(field0) => {
                <i32>::sse_encode(10, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::DescriptorError::Hex(field0) => {
                <i32>::sse_encode(11, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::blockchain::ElectrumConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.socks5, serializer);
        <u8>::sse_encode(self.retry, serializer);
        <Option<u8>>::sse_encode(self.timeout, serializer);
        <u64>::sse_encode(self.stop_gap, serializer);
        <bool>::sse_encode(self.validate_domain, serializer);
    }
}

impl SseEncode for crate::api::blockchain::EsploraConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.base_url, serializer);
        <Option<String>>::sse_encode(self.proxy, serializer);
        <Option<u8>>::sse_encode(self.concurrency, serializer);
        <u64>::sse_encode(self.stop_gap, serializer);
        <Option<u64>>::sse_encode(self.timeout, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::types::FeeRate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.sat_per_vb, serializer);
    }
}

impl SseEncode for crate::api::error::HexError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::error::HexError::InvalidChar(field0) => {
                <i32>::sse_encode(0, serializer);
                <u8>::sse_encode(field0, serializer);
            }
            crate::api::error::HexError::OddLengthString(field0) => {
                <i32>::sse_encode(1, serializer);
                <usize>::sse_encode(field0, serializer);
            }
            crate::api::error::HexError::InvalidLength(field0, field1) => {
                <i32>::sse_encode(2, serializer);
                <usize>::sse_encode(field0, serializer);
                <usize>::sse_encode(field1, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::types::Input {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.s, serializer);
    }
}

impl SseEncode for crate::api::types::KeychainKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::types::KeychainKind::ExternalChain => 0,
                crate::api::types::KeychainKind::InternalChain => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<crate::api::types::BdkPolicy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::BdkPolicy>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::BdkTransactionDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::BdkTransactionDetails>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::BdkTxIn> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::BdkTxIn>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::BdkTxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::BdkTxOut>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::Condition> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::Condition>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Vec<u8>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::LocalUtxo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::LocalUtxo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::OutPoint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::OutPoint>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::PkOrF> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::PkOrF>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(Vec<u32>, Vec<crate::api::types::Condition>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(Vec<u32>, Vec<crate::api::types::Condition>)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, Vec<u32>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, Vec<u32>)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(u32, Vec<crate::api::types::Condition>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(u32, Vec<crate::api::types::Condition>)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::types::ScriptAmount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::types::ScriptAmount>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::types::LocalUtxo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::types::OutPoint>::sse_encode(self.outpoint, serializer);
        <crate::api::types::BdkTxOut>::sse_encode(self.txout, serializer);
        <crate::api::types::KeychainKind>::sse_encode(self.keychain, serializer);
        <bool>::sse_encode(self.is_spent, serializer);
    }
}

impl SseEncode for crate::api::types::LockTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::types::LockTime::Blocks(field0) => {
                <i32>::sse_encode(0, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            crate::api::types::LockTime::Seconds(field0) => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::types::Network::Testnet => 0,
                crate::api::types::Network::Regtest => 1,
                crate::api::types::Network::Bitcoin => 2,
                crate::api::types::Network::Signet => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<std::collections::HashMap<String, Vec<u32>>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <std::collections::HashMap<String, Vec<u32>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::BdkAddress> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::BdkAddress>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::descriptor::BdkDescriptor> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::descriptor::BdkDescriptor>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::BdkPolicy> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::BdkPolicy>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::BdkScriptBuf> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::BdkScriptBuf>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::BdkTransaction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::BdkTransaction>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::BlockTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::BlockTime>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::FeeRate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::FeeRate>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::LockTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::LockTime>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::PsbtSigHashType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::PsbtSigHashType>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::RbfValue> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::RbfValue>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<(crate::api::types::OutPoint, crate::api::types::Input, usize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <(crate::api::types::OutPoint, crate::api::types::Input, usize)>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::blockchain::RpcSyncParams> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::blockchain::RpcSyncParams>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::types::SignOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::types::SignOptions>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::types::OutPoint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.txid, serializer);
        <u32>::sse_encode(self.vout, serializer);
    }
}

impl SseEncode for crate::api::types::Payload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::types::Payload::PubkeyHash { pubkey_hash } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(pubkey_hash, serializer);
            }
            crate::api::types::Payload::ScriptHash { script_hash } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(script_hash, serializer);
            }
            crate::api::types::Payload::WitnessProgram { version, program } => {
                <i32>::sse_encode(2, serializer);
                <crate::api::types::WitnessVersion>::sse_encode(version, serializer);
                <Vec<u8>>::sse_encode(program, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::types::PkOrF {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::types::PkOrF::Pubkey { value } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(value, serializer);
            }
            crate::api::types::PkOrF::XOnlyPubkey { value } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(value, serializer);
            }
            crate::api::types::PkOrF::Fingerprint { value } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(value, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::types::PsbtSigHashType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.inner, serializer);
    }
}

impl SseEncode for crate::api::types::RbfValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::types::RbfValue::RbfDefault => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::types::RbfValue::Value(field0) => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for (crate::api::types::BdkAddress, u32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::types::BdkAddress>::sse_encode(self.0, serializer);
        <u32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        crate::api::psbt::BdkPsbt,
        crate::api::types::BdkTransactionDetails,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::psbt::BdkPsbt>::sse_encode(self.0, serializer);
        <crate::api::types::BdkTransactionDetails>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (Vec<u32>, Vec<crate::api::types::Condition>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u32>>::sse_encode(self.0, serializer);
        <Vec<crate::api::types::Condition>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (crate::api::types::OutPoint, crate::api::types::Input, usize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::types::OutPoint>::sse_encode(self.0, serializer);
        <crate::api::types::Input>::sse_encode(self.1, serializer);
        <usize>::sse_encode(self.2, serializer);
    }
}

impl SseEncode for (String, Vec<u32>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <Vec<u32>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (u32, Vec<crate::api::types::Condition>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.0, serializer);
        <Vec<crate::api::types::Condition>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::blockchain::RpcConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <crate::api::blockchain::Auth>::sse_encode(self.auth, serializer);
        <crate::api::types::Network>::sse_encode(self.network, serializer);
        <String>::sse_encode(self.wallet_name, serializer);
        <Option<crate::api::blockchain::RpcSyncParams>>::sse_encode(self.sync_params, serializer);
    }
}

impl SseEncode for crate::api::blockchain::RpcSyncParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.start_script_count, serializer);
        <u64>::sse_encode(self.start_time, serializer);
        <bool>::sse_encode(self.force_start_time, serializer);
        <u64>::sse_encode(self.poll_rate_sec, serializer);
    }
}

impl SseEncode for crate::api::types::Satisfaction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::types::Satisfaction::Partial {
                n,
                m,
                items,
                sorted,
                conditions,
            } => {
                <i32>::sse_encode(0, serializer);
                <u64>::sse_encode(n, serializer);
                <u64>::sse_encode(m, serializer);
                <Vec<u64>>::sse_encode(items, serializer);
                <Option<bool>>::sse_encode(sorted, serializer);
                <std::collections::HashMap<u32, Vec<crate::api::types::Condition>>>::sse_encode(
                    conditions, serializer,
                );
            }
            crate::api::types::Satisfaction::PartialComplete {
                n,
                m,
                items,
                sorted,
                conditions,
            } => {
                <i32>::sse_encode(1, serializer);
                <u64>::sse_encode(n, serializer);
                <u64>::sse_encode(m, serializer);
                <Vec<u64>>::sse_encode(items, serializer);
                <Option<bool>>::sse_encode(sorted, serializer);
                <std::collections::HashMap<Vec<u32>, Vec<crate::api::types::Condition>>>::sse_encode(conditions, serializer);
            }
            crate::api::types::Satisfaction::Complete { condition } => {
                <i32>::sse_encode(2, serializer);
                <crate::api::types::Condition>::sse_encode(condition, serializer);
            }
            crate::api::types::Satisfaction::None { msg } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(msg, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::types::SatisfiableItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::types::SatisfiableItem::EcdsaSignature { key } => {
                <i32>::sse_encode(0, serializer);
                <crate::api::types::PkOrF>::sse_encode(key, serializer);
            }
            crate::api::types::SatisfiableItem::SchnorrSignature { key } => {
                <i32>::sse_encode(1, serializer);
                <crate::api::types::PkOrF>::sse_encode(key, serializer);
            }
            crate::api::types::SatisfiableItem::Sha256Preimage { hash } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(hash, serializer);
            }
            crate::api::types::SatisfiableItem::Hash256Preimage { hash } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(hash, serializer);
            }
            crate::api::types::SatisfiableItem::Ripemd160Preimage { hash } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(hash, serializer);
            }
            crate::api::types::SatisfiableItem::Hash160Preimage { hash } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(hash, serializer);
            }
            crate::api::types::SatisfiableItem::AbsoluteTimelock { value } => {
                <i32>::sse_encode(6, serializer);
                <crate::api::types::LockTime>::sse_encode(value, serializer);
            }
            crate::api::types::SatisfiableItem::RelativeTimelock { value } => {
                <i32>::sse_encode(7, serializer);
                <u32>::sse_encode(value, serializer);
            }
            crate::api::types::SatisfiableItem::Multisig { keys, threshold } => {
                <i32>::sse_encode(8, serializer);
                <Vec<crate::api::types::PkOrF>>::sse_encode(keys, serializer);
                <u64>::sse_encode(threshold, serializer);
            }
            crate::api::types::SatisfiableItem::Thresh { items, threshold } => {
                <i32>::sse_encode(9, serializer);
                <Vec<crate::api::types::BdkPolicy>>::sse_encode(items, serializer);
                <u64>::sse_encode(threshold, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::types::ScriptAmount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::types::BdkScriptBuf>::sse_encode(self.script, serializer);
        <u64>::sse_encode(self.amount, serializer);
    }
}

impl SseEncode for crate::api::types::SignOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.trust_witness_utxo, serializer);
        <Option<u32>>::sse_encode(self.assume_height, serializer);
        <bool>::sse_encode(self.allow_all_sighashes, serializer);
        <bool>::sse_encode(self.remove_partial_sigs, serializer);
        <bool>::sse_encode(self.try_finalize, serializer);
        <bool>::sse_encode(self.sign_with_tap_internal_key, serializer);
        <bool>::sse_encode(self.allow_grinding, serializer);
    }
}

impl SseEncode for crate::api::types::SledDbConfiguration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.path, serializer);
        <String>::sse_encode(self.tree_name, serializer);
    }
}

impl SseEncode for crate::api::types::SqliteDbConfiguration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.path, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for [u8; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::types::Variant {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::types::Variant::Bech32 => 0,
                crate::api::types::Variant::Bech32m => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::types::WitnessVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::types::WitnessVersion::V0 => 0,
                crate::api::types::WitnessVersion::V1 => 1,
                crate::api::types::WitnessVersion::V2 => 2,
                crate::api::types::WitnessVersion::V3 => 3,
                crate::api::types::WitnessVersion::V4 => 4,
                crate::api::types::WitnessVersion::V5 => 5,
                crate::api::types::WitnessVersion::V6 => 6,
                crate::api::types::WitnessVersion::V7 => 7,
                crate::api::types::WitnessVersion::V8 => 8,
                crate::api::types::WitnessVersion::V9 => 9,
                crate::api::types::WitnessVersion::V10 => 10,
                crate::api::types::WitnessVersion::V11 => 11,
                crate::api::types::WitnessVersion::V12 => 12,
                crate::api::types::WitnessVersion::V13 => 13,
                crate::api::types::WitnessVersion::V14 => 14,
                crate::api::types::WitnessVersion::V15 => 15,
                crate::api::types::WitnessVersion::V16 => 16,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::types::WordCount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::types::WordCount::Words12 => 0,
                crate::api::types::WordCount::Words18 => 1,
                crate::api::types::WordCount::Words24 => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
